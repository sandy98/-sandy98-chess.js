export interface IFenObj {
    pos: string;
    fenPos: string;
    turn: string;
    castling: string;
    enPassant: string;
    halfMoveClock: number;
    fullMoveNumber: number;
}
export interface IResults {
    white: string;
    black: string;
    draw: string;
    unterminated: string;
}
export interface ISevenTags {
    Event: string;
    Site: string;
    Date: string;
    Round: string;
    White: string;
    Black: string;
    Result: string;
}
export interface IMoveInfo {
    turn: string;
    from: number;
    to: number;
    figureFrom: string;
    figureTo: string;
    promotion: string;
    capture: boolean;
    infoOrigin?: string;
    check?: boolean;
    checkmate?: boolean;
    stalemate?: boolean;
    castling: boolean;
    san: string;
    fullMoveNumber: number;
    enPassant: boolean;
}
export interface IGame {
    tags: ISevenTags;
    fens: string[];
    sans: IMoveInfo[];
    ascii(flipBoard: boolean, n: number): string;
    clear(): void;
    fen(index: number): string;
    game_over(): boolean;
    get(square: any, index: number): string;
    in_check(index: number): boolean;
    in_checkmate(index: number): boolean;
    in_draw(index: number): boolean;
    in_stalemate(index: number): boolean;
    in_threefold_repetition(index: number): boolean;
    move(...args: any[]): boolean;
    moves(options: object): string[];
    pgn(): string;
    header(...args: string[]): ISevenTags;
    insufficient_material(n: number): boolean;
    load(fen: string): boolean;
    load_pgn(pgn: string): boolean;
    put(figure: string, square: any, index: number): boolean;
    remove(square: any, index: number): boolean;
    square_color(square: any): string;
    turn(index: number): string;
    undo(): boolean;
    validate_fen(fen: string): boolean;
}
export declare class Game implements IGame {
    static outOfBounds(...args: number[]): boolean;
    static capitalize(word: string): string;
    static PgnDate(dt?: Date): string;
    static row(sq: number | string): number;
    static col(sq: number | string): number;
    static col2string(r: number): string;
    static string2col(c: string): number;
    static row2string(r: number): string;
    static string2row(c: string): number;
    static rowcol2sq(row: number, col: number): number;
    static isEven(sq: string | number): boolean;
    static isOdd(sq: string | number): boolean;
    static isLight(sq: string | number): boolean;
    static isDark(sq: string | number): boolean;
    static xor56(pos: string): string;
    static compressFenPos(pos?: string): string;
    static expandFenPos(fenPos?: string): string;
    static deprecatedCompressFenPos(pos?: string): string;
    static deprecatedExpandFenPos(fenPos?: string): string;
    static fen2obj(fen?: string): IFenObj;
    static obj2fen(fenObj: IFenObj): string;
    static isWhiteFigure(figure: string): boolean;
    static isBlackFigure(figure: string): boolean;
    static isFriend(fig1: string, fig2: string): boolean;
    static isFoe(fig1: string, fig2: string): boolean;
    static san2sq(san: string): number;
    static sq2san(sq: number): string;
    static isEqualPos(fen1: string, fen2: string): boolean;
    static boardArray(): number[];
    g: any;
    static countFigures(figure: string, fen: string): number;
    static figuresArray(figure: string, fen: string): number[];
    static figuresColors(figure: string, fen: string): string[];
    static results: IResults;
    static defaultFen: string;
    static emptyFen: string;
    static sicilianFen: string;
    static indiareyFen: string;
    static yugoslavFen: string;
    static berlinFen: string;
    static sanRegExp: RegExp;
    fens: string[];
    sans: IMoveInfo[];
    tags: ISevenTags;
    constructor(fen?: string);
    reset(fen?: string): void;
    getMaxPos(): number;
    _getWhat(n?: number, what?: string): string;
    getPos(n?: number): string;
    getFenPos(n?: number): string;
    getTurn(n?: number): string;
    getCastling(n?: number): string;
    getEnPassant(n?: number): string;
    getHalfMoveClock(n?: number): number;
    getFullMoveNumber(n?: number): number;
    isShortCastling(from: number, to: number, figure: string): boolean;
    isLongCastling(from: number, to: number, figure: string): boolean;
    isEnPassant(from: number, to: number, npos?: number): boolean;
    isTwoSteps(from: number, to: number, npos?: number): boolean;
    isPromoting(from: number, to: number, npos?: number): boolean;
    moveInfo2san(info: IMoveInfo): string;
    san2MoveInfo(san: string, fen?: string): IMoveInfo;
    canMove(moveInfo: IMoveInfo, n?: number): boolean;
    pgnHeaders(): string;
    pgnMoves(): string;
    ascii(flipBoard?: boolean, n?: number): string;
    clear(): void;
    fen(index?: number): string;
    history(options?: object): any[];
    game_over(): boolean;
    get(square: any, index?: number): string;
    in_check(index?: number): boolean;
    in_checkmate(index?: number): boolean;
    in_draw(index?: number): boolean;
    in_stalemate(index?: number): boolean;
    in_threefold_repetition(index?: number): boolean;
    header(...args: string[]): ISevenTags;
    insufficient_material(_?: number): boolean;
    label(): string;
    toString(): string;
    load(fen?: string): boolean;
    load_pgn(pgn: string): boolean;
    move(...args: any[]): boolean;
    moves(options?: object): string[];
    pgn(): string;
    put(figure: string, square: any, index?: number): boolean;
    remove(square: any, index?: number): boolean;
    square_color(square: any): string;
    turn(index?: number): string;
    undo(): boolean;
    validate_fen(fen: string): boolean;
}
