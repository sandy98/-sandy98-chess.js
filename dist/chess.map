{"version":3,"sources":["game.ts","chess.ts"],"names":[],"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","file":"chess.map","sourceRoot":"../src/lib","sourcesContent":["\n  export interface IFenObj {\n    pos: string\n    fenPos: string\n    turn: string\n    castling: string\n    enPassant: string\n    halfMoveClock: number\n    fullMoveNumber: number\n  }\n  \n  export interface IResults {\n    white: string\n    black: string\n    draw: string\n    unterminated: string\n  }\n\n  export interface ISevenTags {\n    Event: string\n    Site: string\n    Date: string\n    Round: string\n    White: string\n    Black: string\n    Result: string\n  }\n\n  export interface IMoveInfo {\n    turn: string  \n    from: number\n    to: number\n    figureFrom: string\n    figureTo: string\n    promotion: string\n    capture: boolean\n    infoOrigin?: string\n    check?: boolean\n    checkmate?: boolean\n    stalemate?: boolean\n    castling: boolean\n    san: string\n    fullMoveNumber: number\n    enPassant: boolean\n  }\n\n  export interface IGame {\n    tags: ISevenTags\n    fens: string[]\n    sans: IMoveInfo[]\n    ascii(flipBoard: boolean, n: number): string\n    clear(): void\n    fen(index: number): string\n    game_over(): boolean\n    get(square: any, index: number): string\n    in_check(index: number): boolean\n    in_checkmate(index: number): boolean\n    in_draw(index: number): boolean\n    in_stalemate(index: number): boolean\n    in_threefold_repetition(index: number): boolean\n    move(...args: any[]): boolean\n    moves(options: object): string[]\n    pgn(): string\n    header(...args: string[]): ISevenTags\n    insufficient_material(n: number): boolean\n    load(fen: string): boolean\n    load_pgn(pgn: string): boolean  \n    put(figure: string, square: any, index: number): boolean\n    remove(square: any, index: number): boolean\n\n    square_color(square: any): string\n    turn(index: number): string\n    undo(): boolean\n    validate_fen(fen: string): boolean    \n  }\n\n  export class Game implements IGame {\n    static outOfBounds(...args: number[]): boolean {\n      for (let n: number = 0; n < args.length; n++) {\n        if (args[n] < 0 || args[n] > 63) return true\n      }\n      return false\n    }\n\n    static capitalize(word: string): string {\n      return `${word[0].toUpperCase()}${word.split('').slice(1).join('').toLowerCase()}`\n    }\n\n    static PgnDate(dt: Date = new Date()): string {\n      let y = dt.getFullYear()\n      let m = (dt.getMonth() + 1).toString().replace(/^(\\d)$/, '0$1')\n      let d = (dt.getDate()).toString().replace(/^(\\d)$/, '0$1')\n      return `${y}.${m}.${d}`\n    }\n\n    static row(sq: number|string): number {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return Math.floor(sq / 8)\n    }\n    static col(sq: number|string): number {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return sq % 8\n    }\n\n    static col2string(r: number): string {\n      return r < 8 && r >= 0 ? String.fromCharCode(r + 97) : ''\n    }\n\n    static string2col(c: string): number {\n      return !!c.match(/^[a-h]$/) ? c.charCodeAt(0) - 97 : -1\n    }\n\n    static row2string(r: number): string {\n      return r < 8 && r >= 0 ? (r + 1).toString(10) : ''\n    }\n\n    static string2row(c: string): number {\n      return !!c.match(/^[1-8]$/) ? c.charCodeAt(0) - 49 : -1\n    }\n\n    static rowcol2sq(row: number, col: number): number {\n      if (row < 0 || row > 7 || col < 0 || col > 7) return -1\n      return row * 8 + col\n    }\n\n    static isEven(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return sq % 2 === 0\n    }\n    static isOdd(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return !Game.isEven(sq)\n    }\n    static isLight(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      const orec = Game.isOdd(Game.row(sq)) && Game.isEven(Game.col(sq))\n      const eroc = Game.isEven(Game.row(sq)) && Game.isOdd(Game.col(sq))\n      return orec || eroc\n    }\n    static isDark(sq: string|number): boolean {\n      return !Game.isLight(sq)\n    }\n\n    static xor56(pos: string): string {\n      let splitted: string[] = pos.split('')\n      return splitted.map((_, i) => splitted[i ^ 56]).join('')\n    }\n\n    static compressFenPos(pos: string = Game.fen2obj().pos): string {\n      return Game.xor56(pos).match(/\\w{8}/g).join('/').replace(/0+/g, z => z.length.toString())\n    }\n\n    static expandFenPos(fenPos: string = Game.fen2obj().fenPos): string {\n      return Game.xor56(fenPos.split('/').join('').replace(/\\d/g, d => '0'.repeat(parseInt(d))))\n    }\n\n    static deprecatedCompressFenPos(pos: string = Game.fen2obj().pos): string {\n      let splitted = pos.split('')\n      let inverted = splitted.map((_, i) => splitted[i ^ 56]).join('')\n      return inverted.replace(/(\\w{8})(?=\\S)/g, \"$1/\")\n      .replace(/(0+)/g, zeros => zeros.length.toString())\n    }\n  \n    static deprecatedExpandFenPos(fenPos: string = Game.fen2obj().fenPos): string {\n      let expanded = fenPos.replace(/\\//g, '')\n      .replace(/\\d/g, (i) => '0'.repeat(parseInt(i)))\n      let splitted = expanded.split('')\n      return splitted.map((_, i) => splitted[i ^ 56]).join('')\n    }\n  \n    static fen2obj(fen: string = Game.defaultFen): IFenObj {\n      let [fenPos, turn, castling, enPassant, shalfMoveClock, sfullMoveNumber] = fen.split(/\\s+/)\n      let pos = Game.expandFenPos(fenPos)\n      let halfMoveClock: number  = parseInt(shalfMoveClock)\n      let fullMoveNumber: number = parseInt(sfullMoveNumber)\n      return {pos, fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber}\n    }\n  \n    static obj2fen(fenObj: IFenObj): string {\n      let {pos, fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber} = fenObj\n      if (typeof fenPos === 'undefined') {\n        fenPos = Game.compressFenPos(pos)\n      }\n      return [fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber].join(' ')\n    }\n  \n    static isWhiteFigure(figure: string): boolean {\n        return 'PNBRQK'.indexOf(figure) !== -1\n    }\n\n    static isBlackFigure(figure: string): boolean {\n        return 'pnbrqk'.indexOf(figure) !== -1\n    }\n\n    static isFriend(fig1: string, fig2: string): boolean {\n        return (Game.isWhiteFigure(fig1) && Game.isWhiteFigure(fig2))\n          || (Game.isBlackFigure(fig1) && Game.isBlackFigure(fig2))\n    }\n\n    static isFoe(fig1: string, fig2: string): boolean {\n        return (Game.isWhiteFigure(fig1) && Game.isBlackFigure(fig2))\n          || (Game.isBlackFigure(fig1) && Game.isWhiteFigure(fig2))\n    }\n\n    static san2sq(san: string): number {\n        if (!san.match(/^[a-h][1-8]$/)) return -1\n        return san.charCodeAt(0) - 97 + (san.charCodeAt(1) - 49) * 8\n    }\n\n    static sq2san(sq: number): string {\n        if (sq < 0 || sq > 63) return '-'\n        return `${String.fromCharCode((sq % 8) + 97)}${Math.floor(sq / 8) + 1}`\n    }\n\n    static isEqualPos(fen1: string, fen2: string): boolean {\n      let [fen_obj1, fen_obj2] = [Game.fen2obj(fen1), Game.fen2obj(fen2)]\n      return fen_obj1.fenPos === fen_obj2.fenPos\n        && fen_obj1.turn === fen_obj2.turn\n        && fen_obj1.castling === fen_obj2.castling\n        && fen_obj1.enPassant === fen_obj2.enPassant\n    }\n\n    static boardArray(): number[] {\n      const arr = new Array(64)\n      arr.fill(0)\n      return arr.map((_, i) => i)\n    }g\n\n    static countFigures(figure: string, fen: string): number {\n      const pos: string[] = Game.fen2obj(fen).pos.split('')\n      return pos.filter(f => f === figure).length\n    }\n\n    static figuresArray(figure: string, fen: string): number[] {\n      const pos: string = Game.fen2obj(fen).pos\n      return Game.boardArray().filter(i => pos[i] === figure)\n    }\n\n    static figuresColors(figure: string, fen: string): string[] {\n      let figsArr: number[] = Game.figuresArray(figure, fen)\n      return figsArr.map(i => Game.isLight(i) ? 'light': 'dark')\n    }\n\n    static results: IResults = {\n      white: '1-0',\n      black: '0-1',\n      draw: '1/2-1/2',\n      unterminated: '*'\n    }\n    static defaultFen: string = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n    static emptyFen: string = '8/8/8/8/8/8/8/8 w - - 0 1'\n  \n    static sicilianFen: string = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1'\n    static indiareyFen: string = 'r1bq1rk1/pppnn1bp/3p4/3Pp1p1/P1P1Pp2/2N2P2/1P2BBPP/R2QNRK1 b - a3 0 13'\n    static yugoslavFen: string = 'r1bq1rk1/pp2ppbp/2np1np1/8/3NP3/2N1BP2/PPPQ2PP/R3KB1R w KQ - 3 9'\n    static berlinFen: string = 'r1bk1b1r/ppp2ppp/2p5/4Pn2/8/5N2/PPP2PPP/RNB2RK1 w - - 0 9'\n\n    static sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\n  \n\n////////////////////////////////////////////////////////////\n\n    fens: string[] = []\n    sans: IMoveInfo[] = []\n    tags: ISevenTags = <ISevenTags>{\n      Event: 'Internet Game',\n      Site: 'Internet',\n      Date: Game.PgnDate(),\n      Round: '?',\n      White: 'White Player',\n      Black: 'Black Player',\n      Result: Game.results.unterminated\n    }\n\n    constructor(fen: string = Game.defaultFen) {\n      this.reset(fen)\n    }\n  \n    reset(fen: string = Game.defaultFen) {\n      if (!this.validate_fen(fen)) {\n        throw new Error('Invalid FEN')\n      }\n      this.fens = [fen]\n      this.sans = [<IMoveInfo>{}]\n      this.tags.Result = Game.results.unterminated\n    }\n  \n    getMaxPos() {return this.fens.length - 1}\n\n    _getWhat(n: number = this.getMaxPos(), what: string = 'pos'): string {\n      n = n < 0 ? 0 : n >= this.fens.length ? this.getMaxPos() : n\n      return Game.fen2obj(this.fens[n])[what]\n    }\n  \n    getPos(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'pos')\n    }\n  \n    getFenPos(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'fenPos')\n    }\n  \n    getTurn(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'turn')\n    }\n  \n    getCastling(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'castling')\n    }\n  \n    getEnPassant(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'enPassant')\n    }\n  \n    getHalfMoveClock(n: number = this.getMaxPos()): number {\n      return parseInt(this._getWhat(n, 'halfMoveClock'))\n    }\n  \n    getFullMoveNumber(n: number = this.getMaxPos()): number {\n      return parseInt(this._getWhat(n, 'fullMoveNumber'))\n    }\n\n    isShortCastling(from: number, to: number, figure: string): boolean {\n        return (from === 4 && to === 6 && figure === 'K')\n          || (from === 60 && to === 62 && figure === 'k')\n    } \n\n    isLongCastling(from: number, to: number, figure: string): boolean {\n        return (from === 4 && to === 2 && figure === 'K')\n          || (from === 60 && to === 58 && figure === 'k')\n    } \n\n    isEnPassant(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return Game.col(from) !== Game.col(to) \n          && !!pos[from].match(/[Pp]/) \n          && pos[to] === '0'\n    }\n\n    isTwoSteps(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return Math.abs(Game.row(from) - Game.row(to)) === 2\n          && !!pos[from].match(/[Pp]/)\n    }\n\n    isPromoting(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return (pos[from] == 'P' && Game.row(to) === 7) \n          || (pos[from] == 'p' && Game.row(to) === 0)\n    }\n\n    moveInfo2san(info: IMoveInfo): string {\n        \n        if (this.isShortCastling(info.from, info.to, info.figureFrom)) return 'O-O'\n        if (this.isLongCastling(info.from, info.to, info.figureFrom)) return 'O-O-O'\n        //console.log(`In moveInfo2san, figureFrom is: ${info.figureFrom}`)\n        let figure: string = !info.figureFrom.match(/[Pp]/)\n          ? info.figureFrom.toUpperCase()\n          : info.capture\n          ? Game.sq2san(info.from)[0]\n          : ''\n\n        let infoOrigin: string = info.infoOrigin ? info.infoOrigin : ''\n        let capture: string = info.capture ? 'x' : '' \n        let dest: string = Game.sq2san(info.to)\n        let promotion: string = info.promotion ? `=${info.promotion.toUpperCase()}` : ''\n        let checkInfo: string = info.checkmate\n          ? '#'\n          : info.check\n          ? '+'\n          : '' \n\n        return `${figure}${infoOrigin}${capture}${dest}${promotion}${checkInfo}`\n    }\n\n    san2MoveInfo(san: string, fen: string = this.fen()): IMoveInfo {\n      //Must override\n      if (!fen.length) return <IMoveInfo>null\n      if (!san.length) return <IMoveInfo>null\n      return <IMoveInfo>null\n    }\n\n    canMove(moveInfo: IMoveInfo, n: number = this.getMaxPos()): boolean {\n      //Must override\n      if (n < 0 || n > this.getMaxPos()) return false\n      let { figureFrom, figureTo, turn } = moveInfo\n\n      if (\"pnbrqkPNBRQK\".indexOf(figureFrom) === -1) return false\n      if (Game.isFriend(figureFrom, figureTo)) return false\n      if ((Game.isWhiteFigure(figureFrom) && turn === 'b')\n        || (Game.isBlackFigure(figureFrom) && turn === 'w')) return false\n      \n      return true\n    }\n\n    pgnHeaders(): string {\n      let arr = []\n      for (let t in this.tags) {\n        arr = [...arr, `[${t} \"${this.tags[t]}\"]`]\n      }\n      return arr.join('\\n')\n    }\n\n    pgnMoves(): string {\n        let resp: string = this.history({verbose: true}).map(mi => {\n            let info: IMoveInfo = <IMoveInfo>mi\n            let prefix: string = info.turn === 'w' ? `${info.fullMoveNumber}. ` : ''\n            let ep: string = info.enPassant ? ' e.p.' : ''\n            return `${prefix}${info.san}${ep}`\n        })\n        .join('  ')\n        return resp\n    }\n\n// Beginning of public interface methods\n\n    ascii(flipBoard: boolean = false, n: number = this.getMaxPos()): string {\n      let dottedPos = this.getPos(n).replace(/0/g, '.')\n      let header = '   +------------------------+'\n      let blank =  ' '.repeat(header.length)\n      let footer= flipBoard ? '     h  g  f  e  d  c  b  a' : '     a  b  c  d  e  f  g  h'\n      let rows = []\n      for (let y = 0; y < 8; y++) {\n          let r = flipBoard ? ` ${y + 1} |` : ` ${8 - y} |`\n          for (let x = 0; x < 8; x++) {\n              r += ` ${dottedPos[(y * 8 + x) ^ (flipBoard ? 7 : 56)]} `\n          }\n          r += '|'\n          rows.push([r, blank].join('\\n'))\n      }\n      return [header, blank, ...rows, header, blank, footer].join('\\n')\n    }\n\n    clear(): void {\n      this.reset(Game.emptyFen)\n    }\n\n    fen(index: number = this.getMaxPos()): string {return this.fens[index]}\n\n    history(options: object = {verbose: false}): any[] {\n        if (options['verbose']) {\n            return this.sans.slice(1)\n        } else {\n            return this.sans.slice(1).map( mi => mi.san)\n        }\n    }\n\n    game_over(): boolean {\n      //Must override\n      return false\n    }\n\n    get(square: any, index: number = this.getMaxPos()): string {\n      if (typeof square === 'string') square = Game.san2sq(square)\n      return this.getPos(index)[square]\n    }\n\n    in_check(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_checkmate(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_draw(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_stalemate(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_threefold_repetition(index: number = this.getMaxPos()): boolean {\n      if (index < 0 || index > this.getMaxPos()) return false\n        let sliced: string[] = this.fens.map(fen => fen.split(/\\s+/).slice(0, 4).join(' '))\n        // console.log(sliced)\n        for (let i = 0; i <= index; i++ ) {\n          let reps = 1\n          for (let j = i + 1; j <= index; j++) {\n            if (sliced[i] === sliced[j]) {\n              reps++\n              console.log(`Position ${sliced[j]} has repeated ${reps} times`)\n              if (reps >= 3) {\n                return true\n              }\n            }\n          }\n        }\n      return false\n    }\n\n    header(...args: string[]): ISevenTags {\n      if (Game.isOdd(args.length)) args = args.slice(0, args.length - 1)\n      if (!args.length) return this.tags\n      let [keys, values] = [args.filter((_, i) => Game.isEven(i)).map(Game.capitalize),\n        args.filter((_, i) => Game.isOdd(i))]\n      for (let n: number = 0; n < keys.length; n++) {\n        this.tags[keys[n]] = values[n]\n      }\n      return this.tags\n    }\n\n    insufficient_material(_: number = this.getMaxPos()): boolean\n    {\n      //Must override\n      return false\n    }\n\n    label(): string  {return `${this.tags.White} - ${this.tags.Black}\\t ${this.tags.Result}`}\n\n    toString(): string {return this.label()}\n    \n    load(fen: string = Game.defaultFen): boolean {\n      this.reset(fen)\n      return true\n    }\n\n    load_pgn(pgn: string): boolean {\n      if (!pgn.length) return false\n      //Must override\n      return false\n    }\n\n      \n\n    move(...args: any[]): boolean {\n        let moveInfo: IMoveInfo\n        let from: any\n        let to: any\n        let promotion: string\n\n        if (args.length === 0) {\n          return false\n        } else if (args.length === 1) {\n          if (typeof args[0] === 'string') {\n            moveInfo = this.san2MoveInfo(args[0])\n            if (!moveInfo) return false \n            from = moveInfo.from\n            to = moveInfo.to\n            promotion = moveInfo.promotion\n          } else {\n            return false\n          }\n        } else {\n            [from, to, promotion] = args\n            if (typeof from === 'string') {\n              from = Game.san2sq(from)\n            }  \n    \n            if (typeof to === 'string') {\n              to = Game.san2sq(to)\n            }  \n        }\n\n        let fObj: IFenObj = Game.fen2obj(this.fens[this.getMaxPos()])\n        let pos: string[] = fObj.pos.split('')\n        let turn: string = fObj.turn\n        let figFrom: string = pos[from]\n        let figInTo: string = pos[to]\n        let figTo: string = promotion ? promotion : figFrom\n\n        moveInfo = <IMoveInfo>{enPassant: false}\n\n        moveInfo.turn = turn\n        moveInfo.from = from\n        moveInfo.to = to\n        moveInfo.figureFrom = figFrom\n        moveInfo.figureTo = figInTo\n        moveInfo.promotion = promotion\n        moveInfo.capture = figInTo !== '0' || (this.isEnPassant(from, to) \n          && to === Game.san2sq(fObj.enPassant))\n        moveInfo.san = this.moveInfo2san(moveInfo)\n        moveInfo.fullMoveNumber = fObj.fullMoveNumber\n        moveInfo.castling = this.isShortCastling(from, to, moveInfo.figureFrom) \n          || this.isLongCastling(from, to, moveInfo.figureFrom)\n\n        let bCan = this.canMove(moveInfo)\n\n        if (!bCan) return false\n\n        pos[from] = '0'\n        pos[to] = figTo\n        if (figFrom === 'K' && from === 4 && to === 6) {\n            pos[7] = '0'\n            pos[5] = 'R'\n        }\n        if (figFrom === 'K' && from === 4 && to === 2) {\n            pos[0] = '0'\n            pos[3] = 'R'\n        }\n        if (figFrom === 'k' && from === 60 && to === 62) {\n            pos[63] = '0'\n            pos[61] = 'r'\n        }\n        if (figFrom === 'k' && from === 60 && to === 58) {\n            pos[56] = '0'\n            pos[59] = 'R'\n        }\n\n        if (this.isEnPassant(from, to)) {\n            //console.log(\"En passant move from \" + from + \" to \" + to)\n            if (to !== Game.san2sq(fObj.enPassant)) {\n                //console.log(`Destination is ${to} and en-passant is ${Game.san2sq(fObj.enPassant)}`)\n            } else {\n                let sunk: number = Game.san2sq(fObj.enPassant) + 8 * (figFrom === 'P' ? -1 : 1)\n                //console.log(\"En passant sunk pawn at \" + sunk) \n                pos[sunk] = '0'\n                moveInfo.enPassant = true\n            }\n        }\n\n        switch(from) {\n            case 4:\n            fObj.castling = fObj.castling.replace(/[KQ]/g, '')\n            break\n            case 60:\n            fObj.castling = fObj.castling.replace(/[kq]/g, '')\n            break\n            case 0:\n            fObj.castling = fObj.castling.replace('Q', '')\n            break\n            case 7:\n            fObj.castling = fObj.castling.replace('K', '')\n            break\n            case 56:\n            fObj.castling = fObj.castling.replace('q', '')\n            break\n            case 63:\n            fObj.castling = fObj.castling.replace('k', '')\n            break\n            default:\n        }\n        fObj.castling = fObj.castling === '' ? '-' : fObj.castling\n\n        if (this.isTwoSteps(from, to)) {\n            fObj.enPassant = Game.sq2san(figFrom === 'P' ? to - 8 : to + 8)\n        } else {\n            fObj.enPassant = '-'\n        }\n\n        fObj.halfMoveClock = !!figFrom.match(/[Pp]/) || moveInfo.capture ? 0 : ++fObj.halfMoveClock\n        fObj.fullMoveNumber = turn === 'w' ? fObj.fullMoveNumber : ++ fObj.fullMoveNumber\n        \n        fObj = {\n            ...fObj, \n            pos: pos.join(''), \n            fenPos: Game.compressFenPos(pos.join('')),\n            turn: turn === 'w' ? 'b' : 'w'\n            }\n        this.fens = [...this.fens, Game.obj2fen(fObj)]\n        this.sans = [...this.sans, moveInfo]\n        return true\n    }\n\n    moves(options: object = null): string[] {\n      //Must override\n      if (!!options) {\n        return []\n      } else {\n        return []\n      }\n    } \n\n    pgn(): string {\n      return `${[this.pgnHeaders(), this.pgnMoves()].join('\\n\\n')} ${this.tags.Result}`\n    }\n\n    put(figure: string, square: any, index: number = this.getMaxPos()): boolean {\n      if (\"pnbrqk0\".indexOf(figure.toLowerCase()) === -1) return false\n      if (typeof square === 'string') square = Game.san2sq(square)\n      if (square < 0 || square > 63) return false\n      let fen_obj: IFenObj = Game.fen2obj(this.fens[index])\n      let posArray: string[] = fen_obj.pos.split('')\n      posArray[square] = figure\n      delete(fen_obj.fenPos)\n      fen_obj.pos = posArray.join('')\n      let fen: string = Game.obj2fen(fen_obj)\n      this.fens[index] = fen\n      return true\n    }\n\n    remove(square: any, index: number = this.getMaxPos()): boolean {\n      return this.put('0', square, index)\n    }\n\n    square_color(square: any): string {\n      if (typeof square === 'string') square = Game.san2sq(square)\n      return Game.isDark(square) ? 'dark' : 'light'\n    }\n\n    turn(index: number = this.getMaxPos()): string {\n      return this.getTurn(index)\n    }\n\n    undo(): boolean {\n      if (this.getMaxPos() < 1) return false\n      this.fens.pop()\n      this.sans.pop()\n      this.tags.Result = Game.results.unterminated\n      return true\n    }\n\n    validate_fen(fen: string): boolean {\n      //Must override\n      if (fen.length) return true\n      return false\n    }    \n\n  }\n  \n \n","\nimport { Game, IMoveInfo, IFenObj } from './game'\n\nexport interface IFenMoveInfo {\n    moveInfo: IMoveInfo\n    fen: string\n}\n\nexport enum PgnState {\n\tSCANNING = 0,\n\tLABEL = 1,\n\tVALUE = 2,\n\tTOKEN = 3,\n\tCOMMENT = 4,\n\tVARIANT = 5\n}\n\n\nexport class Chess extends Game {\n\n    static difCol(sq1: number, sq2: number): number {\n        return Math.abs(Game.col(sq1) - Game.col(sq2))\n    }\n\n    static difRow(sq1: number, sq2: number): number {\n        return Math.abs(Game.row(sq1) - Game.row(sq2))\n    }\n\n    static isSameCol(sq1: number, sq2: number): boolean {\n        return Chess.difCol(sq1, sq2) === 0\n    }\n\n    static isSameRow(sq1: number, sq2: number): boolean {\n        return Chess.difRow(sq1, sq2) === 0\n    }\n\n    static isDiagonal(sq1: number, sq2: number): boolean {\n        return Chess.difRow(sq1, sq2) === Chess.difCol(sq1, sq2) \n    }\n\n    static isAntiDiagonal(sq1: number, sq2: number): boolean {\n        return Chess.isDiagonal(sq1, sq2) && Math.abs(sq1 - sq2) % 7 == 0 && sq1 !== 63 && sq2 !== 63\n    }\n\n    static isAdjacent(sq1: number, sq2: number): boolean {\n        return Chess.difCol(sq1, sq2) < 2 && Chess.difRow(sq1, sq2) < 2\n    }\n\n    static isKingAttack(sq1: number, sq2: number): boolean {\n        return (sq1 !== sq2) && Chess.isAdjacent(sq1, sq2)     \n    }\n\n    static isWKingCastling(from: number, to: number): boolean {\n        return from === 4 && (to === 6 || to === 2)\n    }\n\n    static isBKingCastling(from: number, to: number): boolean {\n        return from === 60 && (to === 62 || to === 58)\n    }\n\n    static isWPawnAttack(from: number, to: number): boolean {\n        return (Chess.row(to) === (Chess.row(from) + 1)) && (Chess.difCol(from, to) === 1)\n    }\n\n    static isBPawnAttack(from: number, to: number): boolean {\n        return (Chess.row(to) === (Chess.row(from) - 1)) && (Chess.difCol(from, to) === 1)\n    }\n\n    static isWPawnMove(from: number, to: number): boolean {\n        const rowFrom = Game.row(from)\n        if (rowFrom === 1) {\n            return ((Chess.row(to) === rowFrom + 1) || (Chess.row(to) === rowFrom + 2)) \n              && Chess.isSameCol(from, to)\n        } else {\n            return (Chess.row(to) === rowFrom + 1) && Chess.isSameCol(from, to)\n        }\n    }\n\n    static isBPawnMove(from: number, to: number): boolean {\n        const rowFrom = Game.row(from)\n        if (rowFrom === 6) {\n            return ((Chess.row(to) === rowFrom - 1) || (Chess.row(to) === rowFrom - 2)) \n              && Chess.isSameCol(from, to)\n        } else {\n            return (Chess.row(to) === rowFrom - 1) && Chess.isSameCol(from, to)\n        }\n    }\n\n    static isKnightAttack(sq1: number, sq2: number): boolean {\n        return (Chess.difRow(sq1, sq2) === 2 && Chess.difCol(sq1, sq2) === 1)\n          || (Chess.difRow(sq1, sq2) === 1 && Chess.difCol(sq1, sq2) === 2) \n    }\n\n    static isBishopAttack(sq1: number, sq2: number): boolean {\n        return (sq1 !== sq2) && Chess.isDiagonal(sq1, sq2)     \n    }\n\n    static isRookAttack(sq1: number, sq2: number): boolean {\n        return (sq1 !== sq2) && (Chess.isSameRow(sq1, sq2) || Chess.isSameCol(sq1, sq2))\n    }\n\n    static isQueenAttack(sq1: number,sq2: number): boolean {\n        return Chess.isRookAttack(sq1, sq2) || Chess.isBishopAttack(sq1, sq2)\n    }\n\n    static path(sq1: number, sq2: number): number[] {\n        if (!Chess.isQueenAttack(sq1, sq2) && !Chess.isKnightAttack(sq1, sq2)) return []\n        if (Chess.isKnightAttack(sq1, sq2)) return [sq1, sq2]\n        let result: number[] = []\n        let sqOrig: number = sq1 <= sq2 ? sq1 : sq2\n        let sqDest: number = sq2 >= sq1 ? sq2 : sq1\n        let step: number = Chess.isAntiDiagonal(sqOrig, sqDest) ? 7 :\n                           Chess.isDiagonal(sqOrig, sqDest) ? 9 :\n                           Chess.isSameCol(sqOrig, sqDest) ? 8 : 1\n        for (let n: number = sqOrig; n <= sqDest; n += step) {\n            result = [...result, n]\n        }\n        return result\n    }\n\n    static innerPath(sq1: number, sq2: number): number[] {\n        const p: number[] = Chess.path(sq1, sq2)\n        return p.slice(1, p.length - 1)\n    }\n\n    static isClearPath (sq1: number, sq2: number, fen: string): boolean {\n      const inner: number[] = Chess.innerPath(sq1, sq2)\n      if (inner.length === 0) return true\n      const fenObj: IFenObj = Game.fen2obj(fen)\n      for (let i:number = 0; i < inner.length; i++) {\n            if (fenObj.pos[inner[i]] !== '0') return false \n        } \n        return true\n    }\n       \n    static inScope(from: number, to: number, fen: string, onlyAttacks: boolean = false): boolean {\n        const fenObj: IFenObj = Game.fen2obj(fen)\n        const figure: string = fenObj.pos[from]\n\n        switch (figure) {\n           case 'p':\n             if (onlyAttacks) {\n               return Chess.isBPawnAttack(from, to)\n             } else {\n                 return Chess.isBPawnAttack(from, to) || Chess.isBPawnMove(from, to)\n             }\n           case 'P':\n             if (onlyAttacks) {\n               return Chess.isWPawnAttack(from, to)\n             } else {\n                 return Chess.isWPawnAttack(from, to) || Chess.isWPawnMove(from, to)\n             }\n           case 'n':\n           case 'N':\n             return Chess.isKnightAttack(from, to) \n           case 'b':\n           case 'B':\n             return Chess.isBishopAttack(from, to)\n           case 'r':\n           case 'R':\n             return Chess.isRookAttack(from, to) \n           case 'q':\n           case 'Q':\n             return Chess.isQueenAttack(from, to)\n           case 'k':\n             if (onlyAttacks) {\n               return Chess.isKingAttack(from, to)\n             } else {\n                 return Chess.isKingAttack(from, to) || Chess.isBKingCastling(from, to)\n             }\n           case 'K':\n             if (onlyAttacks) {\n               return Chess.isKingAttack(from, to)\n             } else {\n                 return Chess.isKingAttack(from, to) || Chess.isWKingCastling(from, to)\n             }\n           default:\n             return false      \n        }\n    }\n\n    static army(color: string, fen: string): number[] {\n        const army_string: string = color === 'b' ? 'pnbrqk' : 'PNBRQK'\n        const position: string = Game.fen2obj(fen).pos\n        const indexes = position.split('').map((_, i) => i)\n        return indexes.filter((i => army_string.includes(position[i])))\n    }\n\n    static attacksOnSquare(color: string, fen: string, square: number): number [] {\n        const position: string = Game.fen2obj(fen).pos\n        const attackers: number[] = Chess.army(color, fen)\n        return attackers.filter(i => Chess.canAttack(i, square, fen))\n    }\n\n    static canReach(from: number, to: number, fen: string): boolean {\n      return Chess.inScope(from, to, fen) && Chess.isClearPath(from, to, fen)\n    }\n\n    static canAttack(from: number, to: number, fen: string): boolean {\n        return Chess.inScope(from, to, fen, true) && Chess.isClearPath(from, to, fen)\n    }\n\n    static kingSquare(color: string, fen: string): number {\n        const king = color === 'w' ? 'K' : 'k'\n        const fenObj = Game.fen2obj(fen)\n        for (let i: number = 0; i < 64; i++) {\n            if (fenObj.pos[i] === king) return i\n        }\n        return -1\n    }\n\n    static checks (color: string, fen: string): number {\n        let jaques: number = 0\n        const attackers: string = color === 'w' ? 'b' : 'w'\n        const kingSq: number = Chess.kingSquare(color, fen)\n        return Chess.attacksOnSquare(attackers, fen, kingSq).length\n    }\n\n    static sideCanWin(side: string, fen: string): boolean {\n        if (!\"wb\".includes(side) || side.length !== 1) return false\n        const pos: string[] = Game.fen2obj(fen).pos.split('')\n        let [p, n, b, r, q] = side === 'b' ? ['p', 'n', 'b', 'r', 'q'] : ['P', 'N', 'B', 'R', 'Q']\n        let [fp, fn, fb, fr, fq] = side === 'w' ? ['p', 'n', 'b', 'r', 'q'] : ['P', 'N', 'B', 'R', 'Q']\n        let [pc, nc, bc, rc, qc] = [\n          Game.countFigures(p, fen),\n          Game.countFigures(n, fen),\n          Game.countFigures(b, fen),\n          Game.countFigures(r, fen),\n          Game.countFigures(q, fen)\n        ]\n        let [fpc, fnc, fbc, frc, fqc] = [\n          Game.countFigures(fp, fen),\n          Game.countFigures(fn, fen),\n          Game.countFigures(fb, fen),\n          Game.countFigures(fr, fen),\n          Game.countFigures(fq, fen)\n        ]\n  \n        // console.log(pc, nc, bc, rc, qc, \" - \", fpc, fnc, fbc, frc, fqc)\n  \n        if (pc || rc || qc) return true\n  \n        if (nc && bc) return true\n  \n        switch (nc) {\n          case 0:\n            if (!bc) return false\n            break\n          case 1:\n            if (fpc || fnc || fbc || frc) {\n              return true\n            } else {\n              return false\n            }\n          case 2:\n            if (fpc || fnc || fbc || frc || fqc) {\n              return true\n            } else {\n              return false\n            }\n          default:\n            return true\n        }\n  \n        switch (bc) {\n          case 0:\n            return false\n          case 1:\n            if (fpc || fnc) {\n              return true\n            } else if (fbc) {\n                let bcolors: string[] = Game.figuresColors(b, fen)\n                let fbcolors: string[] = Game.figuresColors(fb, fen)\n                for (let i: number = 0; i < fbcolors.length; i++) {\n                    if (bcolors[0] !== fbcolors[i]) return true\n                }\n                return false\n            } else {\n              return false\n            }\n          default:\n            let bcolors: string[] = Game.figuresColors(b, fen)\n            for (let i: number = 1; i < bcolors.length; i++) {\n                if (bcolors[0] !== bcolors[i]) return true\n            }\n            if (fpc || fnc) {\n                return true\n              } else if (fbc) {\n                  let fbcolors: string[] = Game.figuresColors(fb, fen)\n                  for (let i: number = 0; i < fbcolors.length; i++) {\n                      if (bcolors[0] !== fbcolors[i]) return true\n                  }\n                  return false\n              } else {\n                return false\n            }\n  \n        }\n  \n        return false\n      }  \n\n    static lex_pgnfile(pgnFileStr: string): string[] {\n        pgnFileStr = pgnFileStr.replace(/\\r/g, '\\n')\n        let pgnFragments: string[] = pgnFileStr.split(/\\n{2,}/)\n        if (Game.isOdd(pgnFragments.length)) pgnFragments = pgnFragments.slice(0, pgnFragments.length - 1)\n        if (!pgnFragments.length) return [\"\"]\n        let pgns: string[] = []\n        for (let n: number = 0; n < pgnFragments.length; n += 2) {\n            pgns = [...pgns, [pgnFragments[n], pgnFragments[n + 1]].join('\\n\\n')]\n        }\n        return pgns\n    }\n     \n    static parse_pgnfile(pgnFileStr: string): Chess[] {\n        const pgns: string[] = Chess.lex_pgnfile(pgnFileStr)\n        if (!pgns.length) return []\n        let games: Chess[] = []\n        for (let n: number = 0; n < pgns.length; n++) {\n            let game = new Chess()\n            if (game.load_pgn(pgns[n])) games = [...games, game]\n        }\n        return games\n    }\n\n    san2MoveInfo(san: string, fen: string = this.fen()): IMoveInfo {\n        // overriden\n        //const sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\n\n        if (!san.length) return <IMoveInfo>null\n        const match = san.match(Game.sanRegExp)\n        if (!match) return  <IMoveInfo>null\n        const [_, longC, shortC, \n               pawnCol, pawnDestRow, pawnCaptureDest, promotion,\n               figure, origCol, origRow, captureToken, figureDest, \n               check, ckeckMate, altCheckMate] = match\n        const fen_obj = Game.fen2obj(fen)       \n        let retInfo = <IMoveInfo>{}\n        retInfo.turn = fen_obj.turn\n        retInfo.fullMoveNumber = fen_obj.fullMoveNumber\n        \n\n        if (longC) {\n            retInfo.figureFrom = retInfo.turn === 'b' ? 'k' : 'K'\n            retInfo.figureTo = '0'\n            retInfo.from = retInfo.turn === 'b' ? 60 : 4\n            retInfo.to = retInfo.turn === 'b' ? 58 : 2\n            retInfo.san = 'O-O-O'\n            retInfo.castling = true\n            return retInfo\n        } \n        if (shortC) {\n            retInfo.figureFrom = retInfo.turn === 'b' ? 'k' : 'K'\n            retInfo.figureTo = '0'\n            retInfo.from = retInfo.turn === 'b' ? 60 : 4\n            retInfo.to = retInfo.turn === 'b' ? 62 : 6\n            retInfo.san = 'O-O'\n            retInfo.castling = true\n            return retInfo\n        }\n\n        if (pawnCol) {\n         retInfo.figureFrom = retInfo.turn === 'b' ? 'p' : 'P'\n         let origCol: number = Game.string2col(pawnCol)\n         let origRow: number\n         let destCol: number\n         let destRow: number  \n         if (pawnDestRow) {\n            retInfo.figureTo = '0'\n            destRow = Game.string2row(pawnDestRow)\n            destCol = origCol\n            origRow = retInfo.turn === 'b' ? destRow + 1 : destRow - 1\n            retInfo.from = Game.rowcol2sq(origRow, origCol)\n            if (!fen_obj.pos[retInfo.from].match(/[Pp]/)) {\n                retInfo.from += retInfo.turn === 'b' ? 8 : -8\n            }\n            if (!fen_obj.pos[retInfo.from].match(/[Pp]/)) {\n                return <IMoveInfo>null\n            }\n            retInfo.to = Game.rowcol2sq(destRow, destCol)\n         } else if (pawnCaptureDest) {\n            retInfo.capture = true\n            retInfo.to = Game.san2sq(pawnCaptureDest)\n            retInfo.figureTo = fen_obj.pos[retInfo.to]\n            origRow = Game.row(retInfo.to) + ((retInfo.turn === 'w') ? -1 : 1)\n            retInfo.from = Game.rowcol2sq(origRow, origCol) \n            //console.log(origRow)\n            //console.log(retInfo)\n         }\n         if (promotion) {\n             retInfo.promotion = retInfo.turn === 'b' \n               ? promotion.toLowerCase()\n               : promotion.toUpperCase()\n         }\n         return retInfo\n        } else if (figure) {\n          let figurine: string = retInfo.turn === 'w' ? figure.toUpperCase() : figure.toLowerCase()\n          //console.log(`Figurine: ${figurine}`)\n          retInfo.figureFrom = figurine\n          retInfo.from = -1\n          retInfo.to = Game.san2sq(figureDest)\n          retInfo.figureTo = fen_obj.pos[retInfo.to]\n          retInfo.capture = retInfo.figureTo !== '0'\n        //   const candidates: IMoveInfo[] = this.moves({verbose: true})\n        //   .filter((mi: IMoveInfo) => {\n        //     return mi.figureFrom === figurine && mi.to === retInfo.to \n        //   })\n          const candidates: number[] = Game.boardArray().filter(i => fen_obj.pos[i] === figurine)\n          .filter(i => Chess.canReach(i, retInfo.to, fen))\n          .filter(i => {\n              const info: IFenMoveInfo = this.tryMove(i, retInfo.to)\n              return info && this.validate_fen(info.fen) \n          })\n          //console.log(`Candidates: ${candidates}`)\n          switch (candidates.length) {\n              case 0:\n                return <IMoveInfo>null\n              case 1:\n                retInfo.from = candidates[0]\n                break\n              default:\n                if (origCol && origRow) {\n                    let from: number = Game.san2sq(`${origCol}${origRow}`)\n                    for (let n: number = 0; n < candidates.length; n++) {\n                        if (candidates[n] === from) {\n                            retInfo.from = from\n                            break\n                        }\n                    }\n                } else if (origCol) {\n                    let col = Game.string2col(origCol)\n                    for (let n: number = 0; n < candidates.length; n++) {\n                        if (Game.col(candidates[n]) === col) {\n                            retInfo.from = candidates[n]\n                            break\n                        }\n                    }\n                } else if (origRow) {\n                    let row = Game.string2row(origRow)\n                    for (let n: number = 0; n < candidates.length; n++) {\n                        if (Game.row(candidates[n]) === row) {\n                            retInfo.from = candidates[n]\n                            break\n                        }\n                    }\n                } else {\n                    return <IMoveInfo>null\n                }\n          }\n          return retInfo.from !== -1 ? retInfo : <IMoveInfo>null  \n        } else {\n            return <IMoveInfo>null\n        }\n\n    }\n  \n    canMove(moveInfo: IMoveInfo, n: number = this.getMaxPos()): boolean {\n        //Overriden version\n\n        const parentResult = super.canMove(moveInfo, n)\n        if (!parentResult) return false\n        //super.canMove() tests: \n        // 1) that the original figure is a valid one\n        // 2) that the turn is correct\n        // 3) that it's not \"friendly fire\", i.e. not moving over a friend figure.\n\n        const result = Chess.canReach(moveInfo.from, moveInfo.to, this.fens[n])\n        if (!result) return false\n        \n        //Todo: consider constraints for pawn actions and castling before returning true\n\n        //King castling constraints\n        if (moveInfo.figureFrom === 'K' && moveInfo.from === 4 && moveInfo.to === 6) {\n            if (!this.getCastling(n).includes('K')) return false\n            if (moveInfo.figureTo !== '0') return false\n            if (Chess.attacksOnSquare('b', this.fens[n], 4).length) return false \n            if (Chess.attacksOnSquare('b', this.fens[n], 5).length) return false \n        }\n        if (moveInfo.figureFrom === 'K' && moveInfo.from === 4 && moveInfo.to === 2) {\n            if (!this.getCastling(n).includes('Q')) return false\n            if (moveInfo.figureTo !== '0') return false\n            if (Chess.attacksOnSquare('b', this.fens[n], 4).length) return false \n            if (Chess.attacksOnSquare('b', this.fens[n], 3).length) return false \n        }\n        if (moveInfo.figureFrom === 'k' && moveInfo.from === 60 && moveInfo.to === 62) {\n            if (!this.getCastling(n).includes('k')) return false\n            if (moveInfo.figureTo !== '0') return false\n            if (Chess.attacksOnSquare('w', this.fens[n], 60).length) return false \n            if (Chess.attacksOnSquare('w', this.fens[n], 61).length) return false \n            }\n            if (moveInfo.figureFrom === 'k' && moveInfo.from === 60 && moveInfo.to === 58) {\n                if (!this.getCastling(n).includes('q')) return false\n                if (moveInfo.figureTo !== '0') return false\n                if (Chess.attacksOnSquare('w', this.fens[n], 60).length) return false \n                if (Chess.attacksOnSquare('w', this.fens[n], 59).length) return false \n            }\n\n        //Consider pawn move constraints\n        const isFoe: boolean = moveInfo.to === Game.san2sq(this.getEnPassant(n)) \n            || Game.isFoe(moveInfo.figureFrom, moveInfo.figureTo)\n        if (moveInfo.figureFrom === 'P') {\n            if (Chess.isWPawnMove(moveInfo.from, moveInfo.to) && moveInfo.figureTo !== '0') return false\n            if (Chess.isWPawnAttack(moveInfo.from, moveInfo.to) && !isFoe) return false\n        }\n        if (moveInfo.figureFrom === 'p') {\n            if (Chess.isBPawnMove(moveInfo.from, moveInfo.to) && moveInfo.figureTo !== '0') return false\n            if (Chess.isBPawnAttack(moveInfo.from, moveInfo.to) && !isFoe) return false\n        }\n            \n        return true\n    }\n\n    tryMove(from: any, to: any, promotion: string = <string>null): IFenMoveInfo {\n\n        let moveInfo: IMoveInfo\n        \n        if (typeof from === 'string') {\n          from = Game.san2sq(from)\n        }  \n    \n        if (typeof to === 'string') {\n          to = Game.san2sq(to)\n        }  \n\n        if (Game.outOfBounds(from, to)) return <IFenMoveInfo>null\n\n        let fObj: IFenObj = Game.fen2obj(this.fens[this.getMaxPos()])\n        let pos: string[] = fObj.pos.split('')\n        let turn: string = fObj.turn\n        let figFrom: string = pos[from]\n        let figInTo: string = pos[to]\n        let figTo: string = promotion ? promotion : figFrom\n\n        moveInfo = <IMoveInfo>{enPassant: false}\n\n        moveInfo.turn = turn\n        moveInfo.from = from\n        moveInfo.to = to\n        moveInfo.figureFrom = figFrom\n        moveInfo.figureTo = figInTo\n        moveInfo.promotion = promotion\n        moveInfo.capture = figInTo !== '0' || (this.isEnPassant(from, to) \n          && to === Game.san2sq(fObj.enPassant))\n        //console.log(`moveInfo.figureFrom = ${moveInfo.figureFrom}`)  \n        moveInfo.san = this.moveInfo2san(moveInfo)\n        moveInfo.fullMoveNumber = fObj.fullMoveNumber\n        moveInfo.castling = this.isShortCastling(from, to, moveInfo.figureFrom) || this.isLongCastling(from, to, moveInfo.figureFrom)\n\n        let bCan = this.canMove(moveInfo)\n\n        if (!bCan) return <IFenMoveInfo>null\n\n        pos[from] = '0'\n        pos[to] = figTo\n        if (figFrom === 'K' && from === 4 && to === 6) {\n            pos[7] = '0'\n            pos[5] = 'R'\n            moveInfo.san = 'O-O'\n        }\n        if (figFrom === 'K' && from === 4 && to === 2) {\n            pos[0] = '0'\n            pos[3] = 'R'\n            moveInfo.san = 'O-O-O'\n        }\n        if (figFrom === 'k' && from === 60 && to === 62) {\n            pos[63] = '0'\n            pos[61] = 'r'\n            moveInfo.san = 'O-O'\n        }\n        if (figFrom === 'k' && from === 60 && to === 58) {\n            pos[56] = '0'\n            pos[59] = 'R'\n            moveInfo.san = 'O-O-O'\n        }\n\n        if (this.isEnPassant(from, to)) {\n            ////console.log(\"En passant move from \" + from + \" to \" + to)\n            if (to !== Game.san2sq(fObj.enPassant)) {\n                ////console.log(`Destination is ${to} and en-passant is ${Game.san2sq(fObj.enPassant)}`)\n            } else {\n                let sunk: number = Game.san2sq(fObj.enPassant) + 8 * (figFrom === 'P' ? -1 : 1)\n                ////console.log(\"En passant sunk pawn at \" + sunk) \n                pos[sunk] = '0'\n                moveInfo.enPassant = true\n            }\n        }\n\n        switch(from) {\n            case 4:\n            fObj.castling = fObj.castling.replace(/[KQ]/g, '')\n            break\n            case 60:\n            fObj.castling = fObj.castling.replace(/[kq]/g, '')\n            break\n            case 0:\n            fObj.castling = fObj.castling.replace('Q', '')\n            break\n            case 7:\n            fObj.castling = fObj.castling.replace('K', '')\n            break\n            case 56:\n            fObj.castling = fObj.castling.replace('q', '')\n            break\n            case 63:\n            fObj.castling = fObj.castling.replace('k', '')\n            break\n            default:\n        }\n        fObj.castling = fObj.castling === '' ? '-' : fObj.castling\n\n        if (this.isTwoSteps(from, to)) {\n            fObj.enPassant = Game.sq2san(figFrom === 'P' ? to - 8 : to + 8)\n        } else {\n            fObj.enPassant = '-'\n        }\n\n        fObj.halfMoveClock = !!figFrom.match(/[Pp]/) || moveInfo.capture ? 0 : ++fObj.halfMoveClock\n        fObj.fullMoveNumber = turn === 'w' ? fObj.fullMoveNumber : ++ fObj.fullMoveNumber\n        \n        fObj = {\n            ...fObj, \n            pos: pos.join(''), \n            fenPos: Game.compressFenPos(pos.join('')),\n            turn: turn === 'w' ? 'b' : 'w'\n        }\n        return {fen: Game.obj2fen(fObj), moveInfo: moveInfo}\n    }\n\n    game_over(): boolean {\n    //Overriden\n    return this.in_checkmate() \n        || this.in_stalemate()\n        || this.in_draw()\n        || this.in_threefold_repetition() \n        || this.insufficient_material()\n    }\n\n\n    in_check(index: number = this.getMaxPos()): boolean {\n    if (index < 0 || index > this.getMaxPos()) return false\n    return Chess.checks(this.getTurn(index), this.fen(index)) > 0\n    }\n\n    in_checkmate(index: number = this.getMaxPos()): boolean {\n    //Overriden\n    if (index < 0 || index > this.getMaxPos()) return false\n    return this.in_check(index) && this.moves(null, index).length === 0\n    }\n\n    in_draw(index: number = this.getMaxPos()): boolean {\n    //Overriden\n        return this.insufficient_material(index) || Game.fen2obj(this.fen(index)).halfMoveClock >= 100\n    }\n\n    in_stalemate(index: number = this.getMaxPos()): boolean {\n    //Overriden\n      return !this.in_check(index) && this.moves(null, index).length === 0\n    }\n\n    insufficient_material(index: number = this.getMaxPos()): boolean\n    {\n    //Overriden\n      return (!Chess.sideCanWin('w', this.fen(index)) && !Chess.sideCanWin('b', this.fen(index)))\n    }\n\n\n\tload_pgn(pgn: string): boolean {\n            let current: string = ''\n            let token_str: string = \"\"\n            let label_str: string = \"\"\n            let value_str: string = \"\"\n            let index: number = 0\n            let state: PgnState = PgnState.SCANNING\n            let prev_state: PgnState = PgnState.SCANNING\n\n            let game: Chess = new Chess()\n            \n            let strip_nums = (text: string): string => text.replace(/\\d+\\.\\s*(\\.\\.\\.)?\\s*/g, '')\n\n            let is_san = (text: string): boolean => !!text.match(Game.sanRegExp)\n\n            let is_result = (text: string): boolean => {\n                for (let n in Game.results) {\n                    if (text === Game.results[n]) return true\n                }\n                return false\n            }\n\n            do {\n                current = pgn[index++];\n        \n                switch (state) {\n                    case PgnState.SCANNING:\n                    if ('[' === current) {\n                        state = PgnState.LABEL\n                        continue\t\n                    } else if ('{' === current) {\n                        prev_state = state\n                        state = PgnState.COMMENT\n                        continue\n                    } else if ('(' === current) {\n                        prev_state = state\n                        state = PgnState.VARIANT\n                        continue\n                    } else if (current.match(/[\\s\\]]/)) {\n                        continue\n                    } else {\n                        state = PgnState.TOKEN\n                        token_str = current\n                        continue\n                    }\n\n                    case 1: //PgnState.LABEL:\n                    if ('\"' === current) {\n                        state = PgnState.VALUE\n                    } else {\n                        label_str += current\n                    }\n                    continue\n\n                    case 2: //PgnState.VALUE:\n                    if ('\"' === current) {\n                        state = PgnState.SCANNING\n                        game.header(label_str.trim(), value_str)\n                        label_str = \"\"\n                        value_str = \"\"\n                    } else {\n                        value_str += current\n                    }\n                    continue \n                    case 3: //PgnState.TOKEN:\n                        if ('{' == current) {\n                            prev_state = state\n                            state = PgnState.COMMENT\n                        } else if ('(' == current) {\n                            prev_state = state\n                            state = PgnState.VARIANT\n                        } else if (current.match(/[\\s\\[]/)) {\n                            if (is_result(token_str)) game.header(\"Result\", token_str)\n                            if (is_result(token_str) || '[' === current) {\n                                this.fens = game.fens\n                                this.sans = game.sans\n                                this.tags = game.tags\n                                return true\t\t\n                            }\n                            let stripped: string = strip_nums(token_str)\n                            if (is_san(stripped)) {\n                                let bmove = game.move(stripped)\n                                if (!bmove) return false\n                            }\n                            token_str = \"\"\n                        } else {\n                            token_str += current\n                        }\n                    continue\n                    case PgnState.COMMENT:\n                    if ('}' == current) {\n                        state = prev_state\n                    }\n                    continue\n                    case PgnState.VARIANT:\n                    if (')' == current) {\n                        state = prev_state\n                    }\n                    continue\n                    default:\n                    continue\n                } \n            } while (index < pgn.length)\n            this.fens = game.fens\n            this.sans = game.sans\n            this.tags = game.tags\n            return true \t\t\n    }\n\n\n    getInfoOrigin(info: IMoveInfo, fen: string = this.fen()): string {\n        if (!!info.figureFrom.match(/[Pp]/)) return ''\n        const pos: string[] = Game.fen2obj(fen).pos.split('')\n        const army: number[] = pos.map((_, i) => i).filter((n) => n != info.from && pos[n] === info.figureFrom)\n        if (!army.length) return ''\n        const candidates: number[] = army.filter(n => Chess.canReach(n, info.to, fen))\n        if (!candidates.length) return ''\n        const alternatives: number[] = candidates.filter(n => {\n            const tuple: IFenMoveInfo = this.tryMove(n, info.to, info.promotion)\n            return !!tuple && this.validate_fen(tuple.fen)\n        })\n        //console.log(`alternatives[${info.figureFrom}]: ${alternatives}`)\n        switch (alternatives.length) {\n            case 0:\n              return ''\n            case 1:\n              if (Chess.isSameCol(info.from, alternatives[0])) {\n                  return Game.row2string(Game.row(info.from))\n              } else {\n                  return Game.col2string(Game.col(info.from))\n              }\n            default:\n              return Game.sq2san(info.from)\n        }\n    }\n\n    move(...args: any[]): boolean {\n\n        let from: any, to: any, promotion: string\n\n        switch (args.length) {\n          case 0:\n            return false\n          case 1: \n            let info: IMoveInfo = this.san2MoveInfo(args[0], this.fen())\n            if (!info) return false\n            from = info.from\n            to = info.to\n            promotion = info.promotion\n            break\n          default:\n            from = args[0]\n            to = args[1]\n            promotion = args[2]                     \n        }\n        if (typeof from === 'string') from = Game.san2sq(from)\n        if (typeof to === 'string') to = Game.san2sq(to)\n        if (Game.outOfBounds(from, to)) return false\n\n        //console.log(`from: ${from}, to: ${to}, promotion: ${promotion}`)\n        const tuple: IFenMoveInfo = this.tryMove(from, to, promotion)\n        if (tuple === null) return false\n        if (!this.validate_fen(tuple.fen)) return false\n \n        let infoOrigin: string = this.getInfoOrigin(tuple.moveInfo)\n        tuple.moveInfo = {...tuple.moveInfo, infoOrigin: infoOrigin}\n \n        this.fens = [...this.fens, tuple.fen]\n        if (this.in_checkmate()) {\n            tuple.moveInfo = {...tuple.moveInfo, checkmate: true}\n            this.tags.Result = tuple.moveInfo.turn === 'w' ? Game.results.white : Game.results.black\n        } else if (this.in_check()) {\n            tuple.moveInfo = {...tuple.moveInfo, check: true}\n        } else if (this.in_stalemate()) {\n            tuple.moveInfo = {...tuple.moveInfo, stalemate: true}\n            this.tags.Result = Game.results.draw\n        }\n        tuple.moveInfo = {...tuple.moveInfo, san: this.moveInfo2san(tuple.moveInfo)}\n        this.sans = [...this.sans, tuple.moveInfo]\n        return true\n    }\n\n    moves(options: object = null, index: number = this.getMaxPos()): any[] {\n        //Overriden\n        let result: IMoveInfo[] = []\n        const army: string = this.getTurn(index) === 'b' ? 'pnbrqk' : 'PNBRQK'\n        const fen: string = this.fens[index]\n        const position: string = Game.fen2obj(fen).pos\n\n        for (let from: number = 0; from < 64; from++) {\n            if (army.includes(position[from])) {\n                for (let to: number = 0; to < 64; to++) {\n                    let promotion: string = position[from] === 'P' && Game.row(to) === 7 \n                    ? 'Q'\n                    : position[from] === 'p' && Game.row(to) === 0\n                    ? 'q'\n                    : null\n                    let tuple: IFenMoveInfo = this.tryMove(from, to, promotion)\n                    if (tuple && this.validate_fen(tuple.fen)) {\n                        result = [...result, tuple.moveInfo]\n                        if (promotion) {\n                            let others: string[] = promotion === 'Q' ? ['N', 'R', 'B'] : ['n', 'r', 'b']\n                            others.forEach(figure => {\n                                result = [...result,\n                                          {...tuple.moveInfo, \n                                            promotion: figure, san: tuple.moveInfo.san.replace(promotion, figure)}]\n                            })\n                        }\n                    }\n                }\n            }\n        }\n\n        if (options && options['square']) {\n            let from: number = typeof options['square'] === 'string' \n              ? Game.san2sq(options['square']) \n              : options['square']\n            result = result.filter(mi => mi.from === from)\n        }\n        if (options && options['verbose']) {\n            return result\n        }  else {\n            return result.map(mi => mi.san)\n        }\n    }\n\n    validate_fen(fen: string): boolean {\n    //Check length of the string\n    if (!fen.length) return false\n\n    if (fen === Game.emptyFen) return true\n    \n    //Check various anomalies\n    const fen_obj: IFenObj = Game.fen2obj(fen)\n    const pos: string[] = fen_obj.pos.split('')\n    let wKings: number = 0\n    let bKings: number = 0\n    let wPawns: number = 0\n    let bPawns: number = 0\n    let illegalFigs: number = 0\n\n    if (pos.length !== 64) return false\n    if (!fen_obj.turn.match(/[wb]/)) return false\n    if (!fen_obj.castling.match(/([KQkq]+)|(-)/)) return false\n    if (!fen_obj.enPassant.match(/([a-h](3|6))|(-)/)) return false\n\n    for (let n = 0; n < 64; n++) {\n        switch (pos[n]) {\n            case 'K':\n            wKings++\n            break\n            case 'k':\n            bKings++\n            break\n            case 'P':\n            wPawns++\n            break\n            case 'p':\n            bPawns++\n            break\n            default:\n            if (!\"NBRQnbrq0\".includes(pos[n])) illegalFigs++\n        }\n    }\n\n    if (wPawns > 8 || bPawns > 8 || wKings !== 1 || bKings !== 1 || illegalFigs > 0) return false\n    // //console.log(`wPawns: ${wPawns} - bPawns: ${bPawns} - wKings: ${wKings} - bKings: ${bKings}`)\n\n    //Check is not illegal according to checks\n    const turn: string = fen_obj.turn\n    const wChecks: number = Chess.checks('w', fen)\n    const bChecks: number = Chess.checks('b', fen)\n    if ((turn === 'w' && bChecks > 0) || (turn === 'b' && wChecks > 0)) return false\n\n    return true\n    }    \n      \n}\n\nif (typeof window !== 'undefined') window['Chess'] = Chess\n"]}