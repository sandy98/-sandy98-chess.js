{"version":3,"sources":["game.ts","chess.ts"],"names":[],"mappings":"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","file":"chess.map","sourceRoot":"../src/lib","sourcesContent":["\n  export interface IFenObj {\n    pos: string\n    fenPos: string\n    turn: string\n    castling: string\n    enPassant: string\n    halfMoveClock: number\n    fullMoveNumber: number\n  }\n  \n  export interface IResults {\n    white: string\n    black: string\n    draw: string\n    unterminated: string\n  }\n\n  export interface ISevenTags {\n    Event: string\n    Site: string\n    Date: string\n    Round: string\n    White: string\n    Black: string\n    Result: string\n  }\n\n  export interface IMoveInfo {\n    turn: string  \n    from: number\n    to: number\n    figureFrom: string\n    figureTo: string\n    promotion: string\n    capture: boolean\n    infoOrigin?: string\n    check?: boolean\n    checkmate?: boolean\n    stalemate?: boolean\n    castling: boolean\n    san: string\n    fullMoveNumber: number\n    enPassant: boolean\n  }\n\n  export interface IGame {\n    tags: ISevenTags\n    fens: string[]\n    sans: IMoveInfo[]\n    ascii(flipBoard: boolean, n: number): string\n    clear(): void\n    fen(index: number): string\n    game_over(): boolean\n    get(square: any, index: number): string\n    in_check(index: number): boolean\n    in_checkmate(index: number): boolean\n    in_draw(index: number): boolean\n    in_stalemate(index: number): boolean\n    in_threefold_repetition(index: number): boolean\n    move(...args: any[]): boolean\n    moves(options: object): string[]\n    pgn(): string\n    header(...args: string[]): ISevenTags\n    insufficient_material(n: number): boolean\n    load(fen: string): boolean\n    load_pgn(pgn: string): boolean  \n    put(figure: string, square: any, index: number): boolean\n    remove(square: any, index: number): boolean\n\n    square_color(square: any): string\n    turn(index: number): string\n    undo(): boolean\n    validate_fen(fen: string): boolean    \n  }\n\n  export class Game implements IGame {\n    static outOfBounds(...args: number[]): boolean {\n      for (let n: number = 0; n < args.length; n++) {\n        if (args[n] < 0 || args[n] > 63) return true\n      }\n      return false\n    }\n\n    static capitalize(word: string): string {\n      return `${word[0].toUpperCase()}${word.split('').slice(1).join('').toLowerCase()}`\n    }\n\n    static PgnDate(dt: Date = new Date()): string {\n      let y = dt.getFullYear()\n      let m = (dt.getMonth() + 1).toString().replace(/^(\\d)$/, '0$1')\n      let d = (dt.getDate()).toString().replace(/^(\\d)$/, '0$1')\n      return `${y}.${m}.${d}`\n    }\n\n    static row(sq: number|string): number {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return Math.floor(sq / 8)\n    }\n    static col(sq: number|string): number {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return sq % 8\n    }\n\n    static col2string(r: number): string {\n      return r < 8 && r >= 0 ? String.fromCharCode(r + 97) : ''\n    }\n\n    static string2col(c: string): number {\n      return !!c.match(/^[a-h]$/) ? c.charCodeAt(0) - 97 : -1\n    }\n\n    static row2string(r: number): string {\n      return r < 8 && r >= 0 ? (r + 1).toString(10) : ''\n    }\n\n    static string2row(c: string): number {\n      return !!c.match(/^[1-8]$/) ? c.charCodeAt(0) - 49 : -1\n    }\n\n    static rowcol2sq(row: number, col: number): number {\n      if (row < 0 || row > 7 || col < 0 || col > 7) return -1\n      return row * 8 + col\n    }\n\n    static isEven(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return sq % 2 === 0\n    }\n    static isOdd(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return !Game.isEven(sq)\n    }\n    static isLight(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      const orec = Game.isOdd(Game.row(sq)) && Game.isEven(Game.col(sq))\n      const eroc = Game.isEven(Game.row(sq)) && Game.isOdd(Game.col(sq))\n      return orec || eroc\n    }\n    static isDark(sq: string|number): boolean {\n      return !Game.isLight(sq)\n    }\n\n    static xor56(pos: string): string {\n      let splitted: string[] = pos.split('')\n      return splitted.map((_, i) => splitted[i ^ 56]).join('')\n    }\n\n    static compressFenPos(pos: string = Game.fen2obj().pos): string {\n      return Game.xor56(pos).match(/\\w{8}/g).join('/').replace(/0+/g, z => z.length.toString())\n    }\n\n    static expandFenPos(fenPos: string = Game.fen2obj().fenPos): string {\n      return Game.xor56(fenPos.split('/').join('').replace(/\\d/g, d => '0'.repeat(parseInt(d))))\n    }\n\n    static deprecatedCompressFenPos(pos: string = Game.fen2obj().pos): string {\n      let splitted = pos.split('')\n      let inverted = splitted.map((_, i) => splitted[i ^ 56]).join('')\n      return inverted.replace(/(\\w{8})(?=\\S)/g, \"$1/\")\n      .replace(/(0+)/g, zeros => zeros.length.toString())\n    }\n  \n    static deprecatedExpandFenPos(fenPos: string = Game.fen2obj().fenPos): string {\n      let expanded = fenPos.replace(/\\//g, '')\n      .replace(/\\d/g, (i) => '0'.repeat(parseInt(i)))\n      let splitted = expanded.split('')\n      return splitted.map((_, i) => splitted[i ^ 56]).join('')\n    }\n  \n    static fen2obj(fen: string = Game.defaultFen): IFenObj {\n      let [fenPos, turn, castling, enPassant, shalfMoveClock, sfullMoveNumber] = fen.split(/\\s+/)\n      let pos = Game.expandFenPos(fenPos)\n      let halfMoveClock: number  = parseInt(shalfMoveClock)\n      let fullMoveNumber: number = parseInt(sfullMoveNumber)\n      return {pos, fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber}\n    }\n  \n    static obj2fen(fenObj: IFenObj): string {\n      let {pos, fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber} = fenObj\n      if (typeof fenPos === 'undefined') {\n        fenPos = Game.compressFenPos(pos)\n      }\n      return [fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber].join(' ')\n    }\n  \n    static isWhiteFigure(figure: string): boolean {\n        return 'PNBRQK'.indexOf(figure) !== -1\n    }\n\n    static isBlackFigure(figure: string): boolean {\n        return 'pnbrqk'.indexOf(figure) !== -1\n    }\n\n    static isFriend(fig1: string, fig2: string): boolean {\n        return (Game.isWhiteFigure(fig1) && Game.isWhiteFigure(fig2))\n          || (Game.isBlackFigure(fig1) && Game.isBlackFigure(fig2))\n    }\n\n    static isFoe(fig1: string, fig2: string): boolean {\n        return (Game.isWhiteFigure(fig1) && Game.isBlackFigure(fig2))\n          || (Game.isBlackFigure(fig1) && Game.isWhiteFigure(fig2))\n    }\n\n    static san2sq(san: string): number {\n        if (!san.match(/^[a-h][1-8]$/)) return -1\n        return san.charCodeAt(0) - 97 + (san.charCodeAt(1) - 49) * 8\n    }\n\n    static sq2san(sq: number): string {\n        if (sq < 0 || sq > 63) return '-'\n        return `${String.fromCharCode((sq % 8) + 97)}${Math.floor(sq / 8) + 1}`\n    }\n\n    static isEqualPos(fen1: string, fen2: string): boolean {\n      let [fen_obj1, fen_obj2] = [Game.fen2obj(fen1), Game.fen2obj(fen2)]\n      return fen_obj1.fenPos === fen_obj2.fenPos\n        && fen_obj1.turn === fen_obj2.turn\n        && fen_obj1.castling === fen_obj2.castling\n        && fen_obj1.enPassant === fen_obj2.enPassant\n    }\n\n    static boardArray(): number[] {\n      const arr = new Array(64)\n      arr.fill(0)\n      return arr.map((_, i) => i)\n    }g\n\n    static countFigures(figure: string, fen: string): number {\n      const pos: string[] = Game.fen2obj(fen).pos.split('')\n      return pos.filter(f => f === figure).length\n    }\n\n    static figuresArray(figure: string, fen: string): number[] {\n      const pos: string = Game.fen2obj(fen).pos\n      return Game.boardArray().filter(i => pos[i] === figure)\n    }\n\n    static figuresColors(figure: string, fen: string): string[] {\n      let figsArr: number[] = Game.figuresArray(figure, fen)\n      return figsArr.map(i => Game.isLight(i) ? 'light': 'dark')\n    }\n\n    static results: IResults = {\n      white: '1-0',\n      black: '0-1',\n      draw: '1/2-1/2',\n      unterminated: '*'\n    }\n    static defaultFen: string = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n    static emptyFen: string = '8/8/8/8/8/8/8/8 w - - 0 1'\n  \n    static sicilianFen: string = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1'\n    static indiareyFen: string = 'r1bq1rk1/pppnn1bp/3p4/3Pp1p1/P1P1Pp2/2N2P2/1P2BBPP/R2QNRK1 b - a3 0 13'\n    static yugoslavFen: string = 'r1bq1rk1/pp2ppbp/2np1np1/8/3NP3/2N1BP2/PPPQ2PP/R3KB1R w KQ - 3 9'\n    static berlinFen: string = 'r1bk1b1r/ppp2ppp/2p5/4Pn2/8/5N2/PPP2PPP/RNB2RK1 w - - 0 9'\n\n    static sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\n  \n\n////////////////////////////////////////////////////////////\n\n    fens: string[] = []\n    sans: IMoveInfo[] = []\n    tags: ISevenTags = <ISevenTags>{\n      Event: 'Internet Game',\n      Site: 'Internet',\n      Date: Game.PgnDate(),\n      Round: '?',\n      White: 'White Player',\n      Black: 'Black Player',\n      Result: Game.results.unterminated\n    }\n\n    constructor(fen: string = Game.defaultFen) {\n      this.reset(fen)\n    }\n  \n    reset(fen: string = Game.defaultFen) {\n      if (!this.validate_fen(fen)) {\n        throw new Error('Invalid FEN')\n      }\n      this.fens = [fen]\n      this.sans = [<IMoveInfo>{}]\n      this.tags.Result = Game.results.unterminated\n    }\n  \n    getMaxPos() {return this.fens.length - 1}\n\n    _getWhat(n: number = this.getMaxPos(), what: string = 'pos'): string {\n      n = n < 0 ? 0 : n >= this.fens.length ? this.getMaxPos() : n\n      return Game.fen2obj(this.fens[n])[what]\n    }\n  \n    getPos(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'pos')\n    }\n  \n    getFenPos(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'fenPos')\n    }\n  \n    getTurn(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'turn')\n    }\n  \n    getCastling(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'castling')\n    }\n  \n    getEnPassant(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'enPassant')\n    }\n  \n    getHalfMoveClock(n: number = this.getMaxPos()): number {\n      return parseInt(this._getWhat(n, 'halfMoveClock'))\n    }\n  \n    getFullMoveNumber(n: number = this.getMaxPos()): number {\n      return parseInt(this._getWhat(n, 'fullMoveNumber'))\n    }\n\n    isShortCastling(from: number, to: number, figure: string): boolean {\n        return (from === 4 && to === 6 && figure === 'K')\n          || (from === 60 && to === 62 && figure === 'k')\n    } \n\n    isLongCastling(from: number, to: number, figure: string): boolean {\n        return (from === 4 && to === 2 && figure === 'K')\n          || (from === 60 && to === 58 && figure === 'k')\n    } \n\n    isEnPassant(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return Game.col(from) !== Game.col(to) \n          && !!pos[from].match(/[Pp]/) \n          && pos[to] === '0'\n    }\n\n    isTwoSteps(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return Math.abs(Game.row(from) - Game.row(to)) === 2\n          && !!pos[from].match(/[Pp]/)\n    }\n\n    isPromoting(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return (pos[from] == 'P' && Game.row(to) === 7) \n          || (pos[from] == 'p' && Game.row(to) === 0)\n    }\n\n    moveInfo2san(info: IMoveInfo): string {\n        \n        if (this.isShortCastling(info.from, info.to, info.figureFrom)) return 'O-O'\n        if (this.isLongCastling(info.from, info.to, info.figureFrom)) return 'O-O-O'\n        //console.log(`In moveInfo2san, figureFrom is: ${info.figureFrom}`)\n        let figure: string = !info.figureFrom.match(/[Pp]/)\n          ? info.figureFrom.toUpperCase()\n          : info.capture\n          ? Game.sq2san(info.from)[0]\n          : ''\n\n        let infoOrigin: string = info.infoOrigin ? info.infoOrigin : ''\n        let capture: string = info.capture ? 'x' : '' \n        let dest: string = Game.sq2san(info.to)\n        let promotion: string = info.promotion ? `=${info.promotion.toUpperCase()}` : ''\n        let checkInfo: string = info.checkmate\n          ? '#'\n          : info.check\n          ? '+'\n          : '' \n\n        return `${figure}${infoOrigin}${capture}${dest}${promotion}${checkInfo}`\n    }\n\n    san2MoveInfo(san: string, fen: string = this.fen()): IMoveInfo {\n      //Must override\n      if (!fen.length) return <IMoveInfo>null\n      if (!san.length) return <IMoveInfo>null\n      return <IMoveInfo>null\n    }\n\n    canMove(moveInfo: IMoveInfo, n: number = this.getMaxPos()): boolean {\n      //Must override\n      if (n < 0 || n > this.getMaxPos()) return false\n      let { figureFrom, figureTo, turn } = moveInfo\n\n      if (\"pnbrqkPNBRQK\".indexOf(figureFrom) === -1) return false\n      if (Game.isFriend(figureFrom, figureTo)) return false\n      if ((Game.isWhiteFigure(figureFrom) && turn === 'b')\n        || (Game.isBlackFigure(figureFrom) && turn === 'w')) return false\n      \n      return true\n    }\n\n    pgnHeaders(): string {\n      let arr = []\n      for (let t in this.tags) {\n        arr = [...arr, `[${t} \"${this.tags[t]}\"]`]\n      }\n      return arr.join('\\n')\n    }\n\n    pgnMoves(): string {\n        let resp: string = this.history({verbose: true}).map(mi => {\n            let info: IMoveInfo = <IMoveInfo>mi\n            let prefix: string = info.turn === 'w' ? `${info.fullMoveNumber}. ` : ''\n            let ep: string = info.enPassant ? ' e.p.' : ''\n            return `${prefix}${info.san}${ep}`\n        })\n        .join('  ')\n        return resp\n    }\n\n// Beginning of public interface methods\n\n    ascii(flipBoard: boolean = false, n: number = this.getMaxPos()): string {\n      let dottedPos = this.getPos(n).replace(/0/g, '.')\n      let header = '   +------------------------+'\n      let blank =  ' '.repeat(header.length)\n      let footer= flipBoard ? '     h  g  f  e  d  c  b  a' : '     a  b  c  d  e  f  g  h'\n      let rows = []\n      for (let y = 0; y < 8; y++) {\n          let r = flipBoard ? ` ${y + 1} |` : ` ${8 - y} |`\n          for (let x = 0; x < 8; x++) {\n              r += ` ${dottedPos[(y * 8 + x) ^ (flipBoard ? 7 : 56)]} `\n          }\n          r += '|'\n          rows.push([r, blank].join('\\n'))\n      }\n      return [header, blank, ...rows, header, blank, footer].join('\\n')\n    }\n\n    clear(): void {\n      this.reset(Game.emptyFen)\n    }\n\n    fen(index: number = this.getMaxPos()): string {return this.fens[index]}\n\n    history(options: object = {verbose: false}): any[] {\n        if (options['verbose']) {\n            return this.sans.slice(1)\n        } else {\n            return this.sans.slice(1).map( mi => mi.san)\n        }\n    }\n\n    game_over(): boolean {\n      //Must override\n      return false\n    }\n\n    get(square: any, index: number = this.getMaxPos()): string {\n      if (typeof square === 'string') square = Game.san2sq(square)\n      return this.getPos(index)[square]\n    }\n\n    in_check(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_checkmate(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_draw(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_stalemate(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_threefold_repetition(index: number = this.getMaxPos()): boolean {\n      if (index < 0 || index > this.getMaxPos()) return false\n        let sliced: string[] = this.fens.map(fen => fen.split(/\\s+/).slice(0, 4).join(' '))\n        // console.log(sliced)\n        for (let i = 0; i <= index; i++ ) {\n          let reps = 1\n          for (let j = i + 1; j <= index; j++) {\n            if (sliced[i] === sliced[j]) {\n              reps++\n              console.log(`Position ${sliced[j]} has repeated ${reps} times`)\n              if (reps >= 3) {\n                return true\n              }\n            }\n          }\n        }\n      return false\n    }\n\n    header(...args: string[]): ISevenTags {\n      if (Game.isOdd(args.length)) args = args.slice(0, args.length - 1)\n      if (!args.length) return this.tags\n      let [keys, values] = [args.filter((_, i) => Game.isEven(i)).map(Game.capitalize),\n        args.filter((_, i) => Game.isOdd(i))]\n      for (let n: number = 0; n < keys.length; n++) {\n        this.tags[keys[n]] = values[n]\n      }\n      return this.tags\n    }\n\n    insufficient_material(_: number = this.getMaxPos()): boolean\n    {\n      //Must override\n      return false\n    }\n\n    label(): string  {return `${this.tags.White} - ${this.tags.Black}\\t ${this.tags.Result}`}\n\n    toString(): string {return this.label()}\n    \n    load(fen: string = Game.defaultFen): boolean {\n      this.reset(fen)\n      return true\n    }\n\n    load_pgn(pgn: string): boolean {\n      if (!pgn.length) return false\n      //Must override\n      return false\n    }\n\n      \n\n    move(...args: any[]): boolean {\n        let moveInfo: IMoveInfo\n        let from: any\n        let to: any\n        let promotion: string\n\n        if (args.length === 0) {\n          return false\n        } else if (args.length === 1) {\n          if (typeof args[0] === 'string') {\n            moveInfo = this.san2MoveInfo(args[0])\n            if (!moveInfo) return false \n            from = moveInfo.from\n            to = moveInfo.to\n            promotion = moveInfo.promotion\n          } else {\n            return false\n          }\n        } else {\n            [from, to, promotion] = args\n            if (typeof from === 'string') {\n              from = Game.san2sq(from)\n            }  \n    \n            if (typeof to === 'string') {\n              to = Game.san2sq(to)\n            }  \n        }\n\n        let fObj: IFenObj = Game.fen2obj(this.fens[this.getMaxPos()])\n        let pos: string[] = fObj.pos.split('')\n        let turn: string = fObj.turn\n        let figFrom: string = pos[from]\n        let figInTo: string = pos[to]\n        let figTo: string = promotion ? promotion : figFrom\n\n        moveInfo = <IMoveInfo>{enPassant: false}\n\n        moveInfo.turn = turn\n        moveInfo.from = from\n        moveInfo.to = to\n        moveInfo.figureFrom = figFrom\n        moveInfo.figureTo = figInTo\n        moveInfo.promotion = promotion\n        moveInfo.capture = figInTo !== '0' || (this.isEnPassant(from, to) \n          && to === Game.san2sq(fObj.enPassant))\n        moveInfo.san = this.moveInfo2san(moveInfo)\n        moveInfo.fullMoveNumber = fObj.fullMoveNumber\n        moveInfo.castling = this.isShortCastling(from, to, moveInfo.figureFrom) \n          || this.isLongCastling(from, to, moveInfo.figureFrom)\n\n        let bCan = this.canMove(moveInfo)\n\n        if (!bCan) return false\n\n        pos[from] = '0'\n        pos[to] = figTo\n        if (figFrom === 'K' && from === 4 && to === 6) {\n            pos[7] = '0'\n            pos[5] = 'R'\n        }\n        if (figFrom === 'K' && from === 4 && to === 2) {\n            pos[0] = '0'\n            pos[3] = 'R'\n        }\n        if (figFrom === 'k' && from === 60 && to === 62) {\n            pos[63] = '0'\n            pos[61] = 'r'\n        }\n        if (figFrom === 'k' && from === 60 && to === 58) {\n            pos[56] = '0'\n            pos[59] = 'R'\n        }\n\n        if (this.isEnPassant(from, to)) {\n            //console.log(\"En passant move from \" + from + \" to \" + to)\n            if (to !== Game.san2sq(fObj.enPassant)) {\n                //console.log(`Destination is ${to} and en-passant is ${Game.san2sq(fObj.enPassant)}`)\n            } else {\n                let sunk: number = Game.san2sq(fObj.enPassant) + 8 * (figFrom === 'P' ? -1 : 1)\n                //console.log(\"En passant sunk pawn at \" + sunk) \n                pos[sunk] = '0'\n                moveInfo.enPassant = true\n            }\n        }\n\n        switch(from) {\n            case 4:\n            fObj.castling = fObj.castling.replace(/[KQ]/g, '')\n            break\n            case 60:\n            fObj.castling = fObj.castling.replace(/[kq]/g, '')\n            break\n            case 0:\n            fObj.castling = fObj.castling.replace('Q', '')\n            break\n            case 7:\n            fObj.castling = fObj.castling.replace('K', '')\n            break\n            case 56:\n            fObj.castling = fObj.castling.replace('q', '')\n            break\n            case 63:\n            fObj.castling = fObj.castling.replace('k', '')\n            break\n            default:\n        }\n        fObj.castling = fObj.castling === '' ? '-' : fObj.castling\n\n        if (this.isTwoSteps(from, to)) {\n            fObj.enPassant = Game.sq2san(figFrom === 'P' ? to - 8 : to + 8)\n        } else {\n            fObj.enPassant = '-'\n        }\n\n        fObj.halfMoveClock = !!figFrom.match(/[Pp]/) || moveInfo.capture ? 0 : ++fObj.halfMoveClock\n        fObj.fullMoveNumber = turn === 'w' ? fObj.fullMoveNumber : ++ fObj.fullMoveNumber\n        \n        fObj = {\n            ...fObj, \n            pos: pos.join(''), \n            fenPos: Game.compressFenPos(pos.join('')),\n            turn: turn === 'w' ? 'b' : 'w'\n            }\n        this.fens = [...this.fens, Game.obj2fen(fObj)]\n        this.sans = [...this.sans, moveInfo]\n        return true\n    }\n\n    moves(options: object = null): string[] {\n      //Must override\n      if (!!options) {\n        return []\n      } else {\n        return []\n      }\n    } \n\n    pgn(): string {\n      return `${[this.pgnHeaders(), this.pgnMoves()].join('\\n\\n')} ${this.tags.Result}`\n    }\n\n    put(figure: string, square: any, index: number = this.getMaxPos()): boolean {\n      if (\"pnbrqk0\".indexOf(figure.toLowerCase()) === -1) return false\n      if (typeof square === 'string') square = Game.san2sq(square)\n      if (square < 0 || square > 63) return false\n      let fen_obj: IFenObj = Game.fen2obj(this.fens[index])\n      let posArray: string[] = fen_obj.pos.split('')\n      posArray[square] = figure\n      delete(fen_obj.fenPos)\n      fen_obj.pos = posArray.join('')\n      let fen: string = Game.obj2fen(fen_obj)\n      this.fens[index] = fen\n      return true\n    }\n\n    remove(square: any, index: number = this.getMaxPos()): boolean {\n      return this.put('0', square, index)\n    }\n\n    square_color(square: any): string {\n      if (typeof square === 'string') square = Game.san2sq(square)\n      return Game.isDark(square) ? 'dark' : 'light'\n    }\n\n    turn(index: number = this.getMaxPos()): string {\n      return this.getTurn(index)\n    }\n\n    undo(): boolean {\n      if (this.getMaxPos() < 1) return false\n      this.fens.pop()\n      this.sans.pop()\n      this.tags.Result = Game.results.unterminated\n      return true\n    }\n\n    validate_fen(fen: string): boolean {\n      //Must override\n      if (fen.length) return true\n      return false\n    }    \n\n  }\n  \n \n","\nimport { Game, IMoveInfo, IFenObj } from './game'\n\nexport interface IFenMoveInfo {\n    moveInfo: IMoveInfo\n    fen: string\n}\n\nexport enum PgnState {\n\tSCANNING = 0,\n\tLABEL = 1,\n\tVALUE = 2,\n\tTOKEN = 3,\n\tCOMMENT = 4,\n\tVARIANT = 5\n}\n\n\nexport class Chess extends Game {\n\n    static difCol(sq1: number, sq2: number): number {\n        return Math.abs(Game.col(sq1) - Game.col(sq2))\n    }\n\n    static difRow(sq1: number, sq2: number): number {\n        return Math.abs(Game.row(sq1) - Game.row(sq2))\n    }\n\n    static isSameCol(sq1: number, sq2: number): boolean {\n        return Chess.difCol(sq1, sq2) === 0\n    }\n\n    static isSameRow(sq1: number, sq2: number): boolean {\n        return Chess.difRow(sq1, sq2) === 0\n    }\n\n    static isDiagonal(sq1: number, sq2: number): boolean {\n        return Chess.difRow(sq1, sq2) === Chess.difCol(sq1, sq2) \n    }\n\n    static isAntiDiagonal(sq1: number, sq2: number): boolean {\n        return Chess.isDiagonal(sq1, sq2) && Math.abs(sq1 - sq2) % 7 == 0 && sq1 !== 63 && sq2 !== 63\n    }\n\n    static isAdjacent(sq1: number, sq2: number): boolean {\n        return Chess.difCol(sq1, sq2) < 2 && Chess.difRow(sq1, sq2) < 2\n    }\n\n    static isKingAttack(sq1: number, sq2: number): boolean {\n        return (sq1 !== sq2) && Chess.isAdjacent(sq1, sq2)     \n    }\n\n    static isWKingCastling(from: number, to: number): boolean {\n        return from === 4 && (to === 6 || to === 2)\n    }\n\n    static isBKingCastling(from: number, to: number): boolean {\n        return from === 60 && (to === 62 || to === 58)\n    }\n\n    static isWPawnAttack(from: number, to: number): boolean {\n        return (Chess.row(to) === (Chess.row(from) + 1)) && (Chess.difCol(from, to) === 1)\n    }\n\n    static isBPawnAttack(from: number, to: number): boolean {\n        return (Chess.row(to) === (Chess.row(from) - 1)) && (Chess.difCol(from, to) === 1)\n    }\n\n    static isWPawnMove(from: number, to: number): boolean {\n        const rowFrom = Game.row(from)\n        if (rowFrom === 1) {\n            return ((Chess.row(to) === rowFrom + 1) || (Chess.row(to) === rowFrom + 2)) \n              && Chess.isSameCol(from, to)\n        } else {\n            return (Chess.row(to) === rowFrom + 1) && Chess.isSameCol(from, to)\n        }\n    }\n\n    static isBPawnMove(from: number, to: number): boolean {\n        const rowFrom = Game.row(from)\n        if (rowFrom === 6) {\n            return ((Chess.row(to) === rowFrom - 1) || (Chess.row(to) === rowFrom - 2)) \n              && Chess.isSameCol(from, to)\n        } else {\n            return (Chess.row(to) === rowFrom - 1) && Chess.isSameCol(from, to)\n        }\n    }\n\n    static isKnightAttack(sq1: number, sq2: number): boolean {\n        return (Chess.difRow(sq1, sq2) === 2 && Chess.difCol(sq1, sq2) === 1)\n          || (Chess.difRow(sq1, sq2) === 1 && Chess.difCol(sq1, sq2) === 2) \n    }\n\n    static isBishopAttack(sq1: number, sq2: number): boolean {\n        return (sq1 !== sq2) && Chess.isDiagonal(sq1, sq2)     \n    }\n\n    static isRookAttack(sq1: number, sq2: number): boolean {\n        return (sq1 !== sq2) && (Chess.isSameRow(sq1, sq2) || Chess.isSameCol(sq1, sq2))\n    }\n\n    static isQueenAttack(sq1: number,sq2: number): boolean {\n        return Chess.isRookAttack(sq1, sq2) || Chess.isBishopAttack(sq1, sq2)\n    }\n\n    static path(sq1: number, sq2: number): number[] {\n        if (!Chess.isQueenAttack(sq1, sq2) && !Chess.isKnightAttack(sq1, sq2)) return []\n        if (Chess.isKnightAttack(sq1, sq2)) return [sq1, sq2]\n        let result: number[] = []\n        let sqOrig: number = sq1 <= sq2 ? sq1 : sq2\n        let sqDest: number = sq2 >= sq1 ? sq2 : sq1\n        let step: number = Chess.isAntiDiagonal(sqOrig, sqDest) ? 7 :\n                           Chess.isDiagonal(sqOrig, sqDest) ? 9 :\n                           Chess.isSameCol(sqOrig, sqDest) ? 8 : 1\n        for (let n: number = sqOrig; n <= sqDest; n += step) {\n            result = [...result, n]\n        }\n        return result\n    }\n\n    static innerPath(sq1: number, sq2: number): number[] {\n        const p: number[] = Chess.path(sq1, sq2)\n        return p.slice(1, p.length - 1)\n    }\n\n    static isClearPath (sq1: number, sq2: number, fen: string): boolean {\n      const inner: number[] = Chess.innerPath(sq1, sq2)\n      if (inner.length === 0) return true\n      const fenObj: IFenObj = Game.fen2obj(fen)\n      for (let i:number = 0; i < inner.length; i++) {\n            if (fenObj.pos[inner[i]] !== '0') return false \n        } \n        return true\n    }\n       \n    static inScope(from: number, to: number, fen: string, onlyAttacks: boolean = false): boolean {\n        const fenObj: IFenObj = Game.fen2obj(fen)\n        const figure: string = fenObj.pos[from]\n\n        switch (figure) {\n           case 'p':\n             if (onlyAttacks) {\n               return Chess.isBPawnAttack(from, to)\n             } else {\n                 return Chess.isBPawnAttack(from, to) || Chess.isBPawnMove(from, to)\n             }\n           case 'P':\n             if (onlyAttacks) {\n               return Chess.isWPawnAttack(from, to)\n             } else {\n                 return Chess.isWPawnAttack(from, to) || Chess.isWPawnMove(from, to)\n             }\n           case 'n':\n           case 'N':\n             return Chess.isKnightAttack(from, to) \n           case 'b':\n           case 'B':\n             return Chess.isBishopAttack(from, to)\n           case 'r':\n           case 'R':\n             return Chess.isRookAttack(from, to) \n           case 'q':\n           case 'Q':\n             return Chess.isQueenAttack(from, to)\n           case 'k':\n             if (onlyAttacks) {\n               return Chess.isKingAttack(from, to)\n             } else {\n                 return Chess.isKingAttack(from, to) || Chess.isBKingCastling(from, to)\n             }\n           case 'K':\n             if (onlyAttacks) {\n               return Chess.isKingAttack(from, to)\n             } else {\n                 return Chess.isKingAttack(from, to) || Chess.isWKingCastling(from, to)\n             }\n           default:\n             return false      \n        }\n    }\n\n    static army(color: string, fen: string): number[] {\n        const army_string: string = color === 'b' ? 'pnbrqk' : 'PNBRQK'\n        const position: string = Game.fen2obj(fen).pos\n        const indexes = position.split('').map((_, i) => i)\n        return indexes.filter((i => army_string.includes(position[i])))\n    }\n\n    static attacksOnSquare(color: string, fen: string, square: number): number [] {\n        const position: string = Game.fen2obj(fen).pos\n        const attackers: number[] = Chess.army(color, fen)\n        return attackers.filter(i => Chess.canAttack(i, square, fen))\n    }\n\n    static canReach(from: number, to: number, fen: string): boolean {\n      return Chess.inScope(from, to, fen) && Chess.isClearPath(from, to, fen)\n    }\n\n    static canAttack(from: number, to: number, fen: string): boolean {\n        return Chess.inScope(from, to, fen, true) && Chess.isClearPath(from, to, fen)\n    }\n\n    static kingSquare(color: string, fen: string): number {\n        const king = color === 'w' ? 'K' : 'k'\n        const fenObj = Game.fen2obj(fen)\n        for (let i: number = 0; i < 64; i++) {\n            if (fenObj.pos[i] === king) return i\n        }\n        return -1\n    }\n\n    static checks (color: string, fen: string): number {\n        let jaques: number = 0\n        const attackers: string = color === 'w' ? 'b' : 'w'\n        const kingSq: number = Chess.kingSquare(color, fen)\n        return Chess.attacksOnSquare(attackers, fen, kingSq).length\n    }\n\n    static sideCanWin(side: string, fen: string): boolean {\n        if (!\"wb\".includes(side) || side.length !== 1) return false\n        const pos: string[] = Game.fen2obj(fen).pos.split('')\n        let [p, n, b, r, q] = side === 'b' ? ['p', 'n', 'b', 'r', 'q'] : ['P', 'N', 'B', 'R', 'Q']\n        let [fp, fn, fb, fr, fq] = side === 'w' ? ['p', 'n', 'b', 'r', 'q'] : ['P', 'N', 'B', 'R', 'Q']\n        let [pc, nc, bc, rc, qc] = [\n          Game.countFigures(p, fen),\n          Game.countFigures(n, fen),\n          Game.countFigures(b, fen),\n          Game.countFigures(r, fen),\n          Game.countFigures(q, fen)\n        ]\n        let [fpc, fnc, fbc, frc, fqc] = [\n          Game.countFigures(fp, fen),\n          Game.countFigures(fn, fen),\n          Game.countFigures(fb, fen),\n          Game.countFigures(fr, fen),\n          Game.countFigures(fq, fen)\n        ]\n  \n        // console.log(pc, nc, bc, rc, qc, \" - \", fpc, fnc, fbc, frc, fqc)\n  \n        if (pc || rc || qc) return true\n  \n        if (nc && bc) return true\n  \n        switch (nc) {\n          case 0:\n            if (!bc) return false\n            break\n          case 1:\n            if (fpc || fnc || fbc || frc) {\n              return true\n            } else {\n              return false\n            }\n          case 2:\n            if (fpc || fnc || fbc || frc || fqc) {\n              return true\n            } else {\n              return false\n            }\n          default:\n            return true\n        }\n  \n        switch (bc) {\n          case 0:\n            return false\n          case 1:\n            if (fpc || fnc) {\n              return true\n            } else if (fbc) {\n                let bcolors: string[] = Game.figuresColors(b, fen)\n                let fbcolors: string[] = Game.figuresColors(fb, fen)\n                for (let i: number = 0; i < fbcolors.length; i++) {\n                    if (bcolors[0] !== fbcolors[i]) return true\n                }\n                return false\n            } else {\n              return false\n            }\n          default:\n            let bcolors: string[] = Game.figuresColors(b, fen)\n            for (let i: number = 1; i < bcolors.length; i++) {\n                if (bcolors[0] !== bcolors[i]) return true\n            }\n            if (fpc || fnc) {\n                return true\n              } else if (fbc) {\n                  let fbcolors: string[] = Game.figuresColors(fb, fen)\n                  for (let i: number = 0; i < fbcolors.length; i++) {\n                      if (bcolors[0] !== fbcolors[i]) return true\n                  }\n                  return false\n              } else {\n                return false\n            }\n  \n        }\n  \n        return false\n      }  \n\n    static lex_pgnfile(pgnFileStr: string): string[] {\n        pgnFileStr = pgnFileStr.replace(/\\r/g, '\\n')\n        let pgnFragments: string[] = pgnFileStr.split(/\\n{2,}/)\n        if (Game.isOdd(pgnFragments.length)) pgnFragments = pgnFragments.slice(0, pgnFragments.length - 1)\n        if (!pgnFragments.length) return [\"\"]\n        let pgns: string[] = []\n        for (let n: number = 0; n < pgnFragments.length; n += 2) {\n            pgns = [...pgns, [pgnFragments[n], pgnFragments[n + 1]].join('\\n\\n')]\n        }\n        return pgns\n    }\n     \n    static parse_pgnfile(pgnFileStr: string): Chess[] {\n        const pgns: string[] = Chess.lex_pgnfile(pgnFileStr)\n        if (!pgns.length) return []\n        let games: Chess[] = []\n        for (let n: number = 0; n < pgns.length; n++) {\n            let game = new Chess()\n            if (game.load_pgn(pgns[n])) games = [...games, game]\n        }\n        return games\n    }\n\n    san2MoveInfo(san: string, fen: string = this.fen()): IMoveInfo {\n        // overriden\n        //const sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\n\n        if (!san.length) return <IMoveInfo>null\n        const match = san.match(Game.sanRegExp)\n        if (!match) return  <IMoveInfo>null\n        const [_, longC, shortC, \n               pawnCol, pawnDestRow, pawnCaptureDest, promotion,\n               figure, origCol, origRow, captureToken, figureDest, \n               check, ckeckMate, altCheckMate] = match\n        const fen_obj = Game.fen2obj(fen)       \n        let retInfo = <IMoveInfo>{}\n        retInfo.turn = fen_obj.turn\n        retInfo.fullMoveNumber = fen_obj.fullMoveNumber\n        \n\n        if (longC) {\n            retInfo.figureFrom = retInfo.turn === 'b' ? 'k' : 'K'\n            retInfo.figureTo = '0'\n            retInfo.from = retInfo.turn === 'b' ? 60 : 4\n            retInfo.to = retInfo.turn === 'b' ? 58 : 2\n            retInfo.san = 'O-O-O'\n            retInfo.castling = true\n            return retInfo\n        } \n        if (shortC) {\n            retInfo.figureFrom = retInfo.turn === 'b' ? 'k' : 'K'\n            retInfo.figureTo = '0'\n            retInfo.from = retInfo.turn === 'b' ? 60 : 4\n            retInfo.to = retInfo.turn === 'b' ? 62 : 6\n            retInfo.san = 'O-O'\n            retInfo.castling = true\n            return retInfo\n        }\n\n        if (pawnCol) {\n         retInfo.figureFrom = retInfo.turn === 'b' ? 'p' : 'P'\n         let origCol: number = Game.string2col(pawnCol)\n         let origRow: number\n         let destCol: number\n         let destRow: number  \n         if (pawnDestRow) {\n            retInfo.figureTo = '0'\n            destRow = Game.string2row(pawnDestRow)\n            destCol = origCol\n            origRow = retInfo.turn === 'b' ? destRow + 1 : destRow - 1\n            retInfo.from = Game.rowcol2sq(origRow, origCol)\n            if (!fen_obj.pos[retInfo.from].match(/[Pp]/)) {\n                retInfo.from += retInfo.turn === 'b' ? 8 : -8\n            }\n            if (!fen_obj.pos[retInfo.from].match(/[Pp]/)) {\n                return <IMoveInfo>null\n            }\n            retInfo.to = Game.rowcol2sq(destRow, destCol)\n         } else if (pawnCaptureDest) {\n            retInfo.capture = true\n            retInfo.to = Game.san2sq(pawnCaptureDest)\n            retInfo.figureTo = fen_obj.pos[retInfo.to]\n            origRow = Game.row(retInfo.to) + ((retInfo.turn === 'w') ? -1 : 1)\n            retInfo.from = Game.rowcol2sq(origRow, origCol) \n            //console.log(origRow)\n            //console.log(retInfo)\n         }\n         if (promotion) {\n             retInfo.promotion = retInfo.turn === 'b' \n               ? promotion.toLowerCase()\n               : promotion.toUpperCase()\n         }\n         return retInfo\n        } else if (figure) {\n          let figurine: string = retInfo.turn === 'w' ? figure.toUpperCase() : figure.toLowerCase()\n          //console.log(`Figurine: ${figurine}`)\n          retInfo.figureFrom = figurine\n          retInfo.from = -1\n          retInfo.to = Game.san2sq(figureDest)\n          retInfo.figureTo = fen_obj.pos[retInfo.to]\n          retInfo.capture = retInfo.figureTo !== '0'\n        //   const candidates: IMoveInfo[] = this.moves({verbose: true})\n        //   .filter((mi: IMoveInfo) => {\n        //     return mi.figureFrom === figurine && mi.to === retInfo.to \n        //   })\n          const candidates: number[] = Game.boardArray().filter(i => fen_obj.pos[i] === figurine)\n          .filter(i => Chess.canReach(i, retInfo.to, fen))\n          .filter(i => {\n              const info: IFenMoveInfo = this.tryMove(i, retInfo.to)\n              return info && this.validate_fen(info.fen) \n          })\n          //console.log(`Candidates: ${candidates}`)\n          switch (candidates.length) {\n              case 0:\n                return <IMoveInfo>null\n              case 1:\n                retInfo.from = candidates[0]\n                break\n              default:\n                if (origCol && origRow) {\n                    let from: number = Game.san2sq(`${origCol}${origRow}`)\n                    for (let n: number = 0; n < candidates.length; n++) {\n                        if (candidates[n] === from) {\n                            retInfo.from = from\n                            break\n                        }\n                    }\n                } else if (origCol) {\n                    let col = Game.string2col(origCol)\n                    for (let n: number = 0; n < candidates.length; n++) {\n                        if (Game.col(candidates[n]) === col) {\n                            retInfo.from = candidates[n]\n                            break\n                        }\n                    }\n                } else if (origRow) {\n                    let row = Game.string2row(origRow)\n                    for (let n: number = 0; n < candidates.length; n++) {\n                        if (Game.row(candidates[n]) === row) {\n                            retInfo.from = candidates[n]\n                            break\n                        }\n                    }\n                } else {\n                    return <IMoveInfo>null\n                }\n          }\n          return retInfo.from !== -1 ? retInfo : <IMoveInfo>null  \n        } else {\n            return <IMoveInfo>null\n        }\n\n    }\n  \n    canMove(moveInfo: IMoveInfo, n: number = this.getMaxPos()): boolean {\n        //Overriden version\n\n        const parentResult = super.canMove(moveInfo, n)\n        if (!parentResult) return false\n        //super.canMove() tests: \n        // 1) that the original figure is a valid one\n        // 2) that the turn is correct\n        // 3) that it's not \"friendly fire\", i.e. not moving over a friend figure.\n\n        const result = Chess.canReach(moveInfo.from, moveInfo.to, this.fens[n])\n        if (!result) return false\n        \n        //Todo: consider constraints for pawn actions and castling before returning true\n\n        //King castling constraints\n        if (moveInfo.figureFrom === 'K' && moveInfo.from === 4 && moveInfo.to === 6) {\n            if (!this.getCastling(n).includes('K')) return false\n            if (moveInfo.figureTo !== '0') return false\n            if (Chess.attacksOnSquare('b', this.fens[n], 4).length) return false \n            if (Chess.attacksOnSquare('b', this.fens[n], 5).length) return false \n        }\n        if (moveInfo.figureFrom === 'K' && moveInfo.from === 4 && moveInfo.to === 2) {\n            if (!this.getCastling(n).includes('Q')) return false\n            if (moveInfo.figureTo !== '0') return false\n            if (Chess.attacksOnSquare('b', this.fens[n], 4).length) return false \n            if (Chess.attacksOnSquare('b', this.fens[n], 3).length) return false \n        }\n        if (moveInfo.figureFrom === 'k' && moveInfo.from === 60 && moveInfo.to === 62) {\n            if (!this.getCastling(n).includes('k')) return false\n            if (moveInfo.figureTo !== '0') return false\n            if (Chess.attacksOnSquare('w', this.fens[n], 60).length) return false \n            if (Chess.attacksOnSquare('w', this.fens[n], 61).length) return false \n            }\n            if (moveInfo.figureFrom === 'k' && moveInfo.from === 60 && moveInfo.to === 58) {\n                if (!this.getCastling(n).includes('q')) return false\n                if (moveInfo.figureTo !== '0') return false\n                if (Chess.attacksOnSquare('w', this.fens[n], 60).length) return false \n                if (Chess.attacksOnSquare('w', this.fens[n], 59).length) return false \n            }\n\n        //Consider pawn move constraints\n        const isFoe: boolean = moveInfo.to === Game.san2sq(this.getEnPassant(n)) \n            || Game.isFoe(moveInfo.figureFrom, moveInfo.figureTo)\n        if (moveInfo.figureFrom === 'P') {\n            if (Chess.isWPawnMove(moveInfo.from, moveInfo.to) && moveInfo.figureTo !== '0') return false\n            if (Chess.isWPawnAttack(moveInfo.from, moveInfo.to) && !isFoe) return false\n        }\n        if (moveInfo.figureFrom === 'p') {\n            if (Chess.isBPawnMove(moveInfo.from, moveInfo.to) && moveInfo.figureTo !== '0') return false\n            if (Chess.isBPawnAttack(moveInfo.from, moveInfo.to) && !isFoe) return false\n        }\n            \n        return true\n    }\n\n    tryMove(from: any, to: any, promotion: string = <string>null): IFenMoveInfo {\n\n        let moveInfo: IMoveInfo\n        \n        if (typeof from === 'string') {\n          from = Game.san2sq(from)\n        }  \n    \n        if (typeof to === 'string') {\n          to = Game.san2sq(to)\n        }  \n\n        if (Game.outOfBounds(from, to)) return <IFenMoveInfo>null\n\n        let fObj: IFenObj = Game.fen2obj(this.fens[this.getMaxPos()])\n        let pos: string[] = fObj.pos.split('')\n        let turn: string = fObj.turn\n        let figFrom: string = pos[from]\n        let figInTo: string = pos[to]\n        let figTo: string = promotion ? promotion : figFrom\n\n        moveInfo = <IMoveInfo>{enPassant: false}\n\n        moveInfo.turn = turn\n        moveInfo.from = from\n        moveInfo.to = to\n        moveInfo.figureFrom = figFrom\n        moveInfo.figureTo = figInTo\n        moveInfo.promotion = promotion\n        moveInfo.capture = figInTo !== '0' || (this.isEnPassant(from, to) \n          && to === Game.san2sq(fObj.enPassant))\n        //console.log(`moveInfo.figureFrom = ${moveInfo.figureFrom}`)  \n        moveInfo.san = this.moveInfo2san(moveInfo)\n        moveInfo.fullMoveNumber = fObj.fullMoveNumber\n        moveInfo.castling = this.isShortCastling(from, to, moveInfo.figureFrom) || this.isLongCastling(from, to, moveInfo.figureFrom)\n\n        let bCan = this.canMove(moveInfo)\n\n        if (!bCan) return <IFenMoveInfo>null\n\n        pos[from] = '0'\n        pos[to] = figTo\n        if (figFrom === 'K' && from === 4 && to === 6) {\n            pos[7] = '0'\n            pos[5] = 'R'\n            moveInfo.san = 'O-O'\n        }\n        if (figFrom === 'K' && from === 4 && to === 2) {\n            pos[0] = '0'\n            pos[3] = 'R'\n            moveInfo.san = 'O-O-O'\n        }\n        if (figFrom === 'k' && from === 60 && to === 62) {\n            pos[63] = '0'\n            pos[61] = 'r'\n            moveInfo.san = 'O-O'\n        }\n        if (figFrom === 'k' && from === 60 && to === 58) {\n            pos[56] = '0'\n            pos[59] = 'R'\n            moveInfo.san = 'O-O-O'\n        }\n\n        if (this.isEnPassant(from, to)) {\n            ////console.log(\"En passant move from \" + from + \" to \" + to)\n            if (to !== Game.san2sq(fObj.enPassant)) {\n                ////console.log(`Destination is ${to} and en-passant is ${Game.san2sq(fObj.enPassant)}`)\n            } else {\n                let sunk: number = Game.san2sq(fObj.enPassant) + 8 * (figFrom === 'P' ? -1 : 1)\n                ////console.log(\"En passant sunk pawn at \" + sunk) \n                pos[sunk] = '0'\n                moveInfo.enPassant = true\n            }\n        }\n\n        switch(from) {\n            case 4:\n            fObj.castling = fObj.castling.replace(/[KQ]/g, '')\n            break\n            case 60:\n            fObj.castling = fObj.castling.replace(/[kq]/g, '')\n            break\n            case 0:\n            fObj.castling = fObj.castling.replace('Q', '')\n            break\n            case 7:\n            fObj.castling = fObj.castling.replace('K', '')\n            break\n            case 56:\n            fObj.castling = fObj.castling.replace('q', '')\n            break\n            case 63:\n            fObj.castling = fObj.castling.replace('k', '')\n            break\n            default:\n        }\n        fObj.castling = fObj.castling === '' ? '-' : fObj.castling\n\n        if (this.isTwoSteps(from, to)) {\n            fObj.enPassant = Game.sq2san(figFrom === 'P' ? to - 8 : to + 8)\n        } else {\n            fObj.enPassant = '-'\n        }\n\n        fObj.halfMoveClock = !!figFrom.match(/[Pp]/) || moveInfo.capture ? 0 : ++fObj.halfMoveClock\n        fObj.fullMoveNumber = turn === 'w' ? fObj.fullMoveNumber : ++ fObj.fullMoveNumber\n        \n        fObj = {\n            ...fObj, \n            pos: pos.join(''), \n            fenPos: Game.compressFenPos(pos.join('')),\n            turn: turn === 'w' ? 'b' : 'w'\n        }\n        return {fen: Game.obj2fen(fObj), moveInfo: moveInfo}\n    }\n\n    game_over(): boolean {\n    //Overriden\n    return this.in_checkmate() \n        || this.in_stalemate()\n        || this.in_draw()\n        || this.in_threefold_repetition() \n        || this.insufficient_material()\n    }\n\n\n    in_check(index: number = this.getMaxPos()): boolean {\n    if (index < 0 || index > this.getMaxPos()) return false\n    return Chess.checks(this.getTurn(index), this.fen(index)) > 0\n    }\n\n    in_checkmate(index: number = this.getMaxPos()): boolean {\n    //Overriden\n    if (index < 0 || index > this.getMaxPos()) return false\n    return this.in_check(index) && this.moves(null, index).length === 0\n    }\n\n    in_draw(index: number = this.getMaxPos()): boolean {\n    //Overriden\n        return this.insufficient_material(index) || Game.fen2obj(this.fen(index)).halfMoveClock >= 100\n    }\n\n    in_stalemate(index: number = this.getMaxPos()): boolean {\n    //Overriden\n      return !this.in_check(index) && this.moves(null, index).length === 0\n    }\n\n    insufficient_material(index: number = this.getMaxPos()): boolean\n    {\n    //Overriden\n      return (!Chess.sideCanWin('w', this.fen(index)) && !Chess.sideCanWin('b', this.fen(index)))\n    }\n\n\n\tload_pgn(pgn: string): boolean {\n            let current: string = ''\n            let token_str: string = \"\"\n            let label_str: string = \"\"\n            let value_str: string = \"\"\n            let index: number = 0\n            let state: PgnState = PgnState.SCANNING\n            let prev_state: PgnState = PgnState.SCANNING\n\n            let game: Chess = new Chess()\n            \n            let strip_nums = (text: string): string => text.replace(/\\d+\\.\\s*(\\.\\.\\.)?\\s*/g, '')\n\n            let is_san = (text: string): boolean => !!text.match(Game.sanRegExp)\n\n            let is_result = (text: string): boolean => {\n                for (let n in Game.results) {\n                    if (text === Game.results[n]) return true\n                }\n                return false\n            }\n\n            do {\n                current = pgn[index++];\n        \n                switch (state) {\n                    case PgnState.SCANNING:\n                    if ('[' === current) {\n                        state = PgnState.LABEL\n                        continue\t\n                    } else if ('{' === current) {\n                        prev_state = state\n                        state = PgnState.COMMENT\n                        continue\n                    } else if ('(' === current) {\n                        prev_state = state\n                        state = PgnState.VARIANT\n                        continue\n                    } else if (current.match(/[\\s\\]]/)) {\n                        continue\n                    } else {\n                        state = PgnState.TOKEN\n                        token_str = current\n                        continue\n                    }\n\n                    case 1: //PgnState.LABEL:\n                    if ('\"' === current) {\n                        state = PgnState.VALUE\n                    } else {\n                        label_str += current\n                    }\n                    continue\n\n                    case 2: //PgnState.VALUE:\n                    if ('\"' === current) {\n                        state = PgnState.SCANNING\n                        game.header(label_str.trim(), value_str)\n                        label_str = \"\"\n                        value_str = \"\"\n                    } else {\n                        value_str += current\n                    }\n                    continue \n                    case 3: //PgnState.TOKEN:\n                        if ('{' == current) {\n                            prev_state = state\n                            state = PgnState.COMMENT\n                        } else if ('(' == current) {\n                            prev_state = state\n                            state = PgnState.VARIANT\n                        } else if (current.match(/[\\s\\[]/)) {\n                            if (is_result(token_str)) game.header(\"Result\", token_str)\n                            if (is_result(token_str) || '[' === current) {\n                                this.fens = game.fens\n                                this.sans = game.sans\n                                this.tags = game.tags\n                                return true\t\t\n                            }\n                            let stripped: string = strip_nums(token_str)\n                            if (is_san(stripped)) {\n                                let bmove = game.move(stripped)\n                                if (!bmove) return false\n                            }\n                            token_str = \"\"\n                        } else {\n                            token_str += current\n                        }\n                    continue\n                    case PgnState.COMMENT:\n                    if ('}' == current) {\n                        state = prev_state\n                    }\n                    continue\n                    case PgnState.VARIANT:\n                    if (')' == current) {\n                        state = prev_state\n                    }\n                    continue\n                    default:\n                    continue\n                } \n            } while (index < pgn.length)\n            this.fens = game.fens\n            this.sans = game.sans\n            this.tags = game.tags\n            return true \t\t\n    }\n\n\n    getInfoOrigin(info: IMoveInfo, fen: string = this.fen()): string {\n        if (!!info.figureFrom.match(/[Pp]/)) return ''\n        const pos: string[] = Game.fen2obj(fen).pos.split('')\n        const army: number[] = pos.map((_, i) => i).filter((n) => n != info.from && pos[n] === info.figureFrom)\n        if (!army.length) return ''\n        const candidates: number[] = army.filter(n => Chess.canReach(n, info.to, fen))\n        if (!candidates.length) return ''\n        const alternatives: number[] = candidates.filter(n => {\n            const tuple: IFenMoveInfo = this.tryMove(n, info.to, info.promotion)\n            return !!tuple && this.validate_fen(tuple.fen)\n        })\n        //console.log(`alternatives[${info.figureFrom}]: ${alternatives}`)\n        switch (alternatives.length) {\n            case 0:\n              return ''\n            case 1:\n              if (Chess.isSameCol(info.from, alternatives[0])) {\n                  return Game.row2string(Game.row(info.from))\n              } else {\n                  return Game.col2string(Game.col(info.from))\n              }\n            default:\n              return Game.sq2san(info.from)\n        }\n    }\n\n    move(...args: any[]): boolean {\n\n        let from: any, to: any, promotion: string\n\n        switch (args.length) {\n          case 0:\n            return false\n          case 1: \n            let info: IMoveInfo = this.san2MoveInfo(args[0], this.fen())\n            if (!info) return false\n            from = info.from\n            to = info.to\n            promotion = info.promotion\n            break\n          default:\n            from = args[0]\n            to = args[1]\n            promotion = args[2]                     \n        }\n        if (typeof from === 'string') from = Game.san2sq(from)\n        if (typeof to === 'string') to = Game.san2sq(to)\n        if (Game.outOfBounds(from, to)) return false\n\n        //console.log(`from: ${from}, to: ${to}, promotion: ${promotion}`)\n        const tuple: IFenMoveInfo = this.tryMove(from, to, promotion)\n        if (tuple === null) return false\n        if (!this.validate_fen(tuple.fen)) return false\n \n        let infoOrigin: string = this.getInfoOrigin(tuple.moveInfo)\n        tuple.moveInfo = {...tuple.moveInfo, infoOrigin: infoOrigin}\n \n        this.fens = [...this.fens, tuple.fen]\n        if (this.in_checkmate()) {\n            tuple.moveInfo = {...tuple.moveInfo, checkmate: true}\n            this.tags.Result = tuple.moveInfo.turn === 'w' ? Game.results.white : Game.results.black\n        } else if (this.in_check()) {\n            tuple.moveInfo = {...tuple.moveInfo, check: true}\n        } else if (this.in_stalemate()) {\n            tuple.moveInfo = {...tuple.moveInfo, stalemate: true}\n            this.tags.Result = Game.results.draw\n        }\n        tuple.moveInfo = {...tuple.moveInfo, san: this.moveInfo2san(tuple.moveInfo)}\n        this.sans = [...this.sans, tuple.moveInfo]\n        return true\n    }\n\n    moves(options: object = null, index: number = this.getMaxPos()): any[] {\n        //Overriden\n        let result: IMoveInfo[] = []\n        const army: string = this.getTurn(index) === 'b' ? 'pnbrqk' : 'PNBRQK'\n        const fen: string = this.fens[index]\n        const position: string = Game.fen2obj(fen).pos\n\n        for (let from: number = 0; from < 64; from++) {\n            if (army.includes(position[from])) {\n                for (let to: number = 0; to < 64; to++) {\n                    let promotion: string = position[from] === 'P' && Game.row(to) === 7 \n                    ? 'Q'\n                    : position[from] === 'p' && Game.row(to) === 0\n                    ? 'q'\n                    : null\n                    let tuple: IFenMoveInfo = this.tryMove(from, to, promotion)\n                    if (tuple && this.validate_fen(tuple.fen)) {\n                        result = [...result, tuple.moveInfo]\n                        if (promotion) {\n                            let others: string[] = promotion === 'Q' ? ['N', 'R', 'B'] : ['n', 'r', 'b']\n                            others.forEach(figure => {\n                                result = [...result,\n                                          {...tuple.moveInfo, \n                                            promotion: figure, san: tuple.moveInfo.san.replace(promotion, figure)}]\n                            })\n                        }\n                    }\n                }\n            }\n        }\n\n        if (options && options['square']) {\n            let from: number = typeof options['square'] === 'string' \n              ? Game.san2sq(options['square']) \n              : options['square']\n            result = result.filter(mi => mi.from === from)\n        }\n        if (options && options['verbose']) {\n            return result\n        }  else {\n            return result.map(mi => mi.san)\n        }\n    }\n\n    validate_fen(fen: string): boolean {\n    //Check length of the string\n    if (!fen.length) return false\n    \n    //Check various anomalies\n    const fen_obj: IFenObj = Game.fen2obj(fen)\n    const pos: string[] = fen_obj.pos.split('')\n    let wKings: number = 0\n    let bKings: number = 0\n    let wPawns: number = 0\n    let bPawns: number = 0\n    let illegalFigs: number = 0\n\n    if (pos.length !== 64) return false\n    if (!fen_obj.turn.match(/[wb]/)) return false\n    if (!fen_obj.castling.match(/([KQkq]+)|(-)/)) return false\n    if (!fen_obj.enPassant.match(/([a-h](3|6))|(-)/)) return false\n\n    for (let n = 0; n < 64; n++) {\n        switch (pos[n]) {\n            case 'K':\n            wKings++\n            break\n            case 'k':\n            bKings++\n            break\n            case 'P':\n            wPawns++\n            break\n            case 'p':\n            bPawns++\n            break\n            default:\n            if (!\"NBRQnbrq0\".includes(pos[n])) illegalFigs++\n        }\n    }\n\n    if (wPawns > 8 || bPawns > 8 || wKings !== 1 || bKings !== 1 || illegalFigs > 0) return false\n    // //console.log(`wPawns: ${wPawns} - bPawns: ${bPawns} - wKings: ${wKings} - bKings: ${bKings}`)\n\n    //Check is not illegal according to checks\n    const turn: string = fen_obj.turn\n    const wChecks: number = Chess.checks('w', fen)\n    const bChecks: number = Chess.checks('b', fen)\n    if ((turn === 'w' && bChecks > 0) || (turn === 'b' && wChecks > 0)) return false\n\n    return true\n    }    \n      \n}\n\nif (typeof window !== 'undefined') window['Chess'] = Chess\n"]}