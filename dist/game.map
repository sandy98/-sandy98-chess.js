{"version":3,"sources":["game.ts"],"names":[],"mappings":"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","file":"game.map","sourceRoot":"../src/lib","sourcesContent":["\n  export interface IFenObj {\n    pos: string\n    fenPos: string\n    turn: string\n    castling: string\n    enPassant: string\n    halfMoveClock: number\n    fullMoveNumber: number\n  }\n  \n  export interface IResults {\n    white: string\n    black: string\n    draw: string\n    unterminated: string\n  }\n\n  export interface ISevenTags {\n    Event: string\n    Site: string\n    Date: string\n    Round: string\n    White: string\n    Black: string\n    Result: string\n  }\n\n  export interface IMoveInfo {\n    turn: string  \n    from: number\n    to: number\n    figureFrom: string\n    figureTo: string\n    promotion: string\n    capture: boolean\n    infoOrigin?: string\n    check?: boolean\n    checkmate?: boolean\n    stalemate?: boolean\n    castling: boolean\n    san: string\n    fullMoveNumber: number\n    enPassant: boolean\n  }\n\n  export interface IGame {\n    tags: ISevenTags\n    fens: string[]\n    sans: IMoveInfo[]\n    ascii(flipBoard: boolean, n: number): string\n    clear(): void\n    fen(index: number): string\n    game_over(): boolean\n    get(square: any, index: number): string\n    in_check(index: number): boolean\n    in_checkmate(index: number): boolean\n    in_draw(index: number): boolean\n    in_stalemate(index: number): boolean\n    in_threefold_repetition(index: number): boolean\n    move(...args: any[]): boolean\n    moves(options: object): string[]\n    pgn(): string\n    header(...args: string[]): ISevenTags\n    insufficient_material(n: number): boolean\n    load(fen: string): boolean\n    load_pgn(pgn: string): boolean  \n    put(figure: string, square: any, index: number): boolean\n    remove(square: any, index: number): boolean\n\n    square_color(square: any): string\n    turn(index: number): string\n    undo(): boolean\n    validate_fen(fen: string): boolean    \n  }\n\n  export class Game implements IGame {\n    static outOfBounds(...args: number[]): boolean {\n      for (let n: number = 0; n < args.length; n++) {\n        if (args[n] < 0 || args[n] > 63) return true\n      }\n      return false\n    }\n\n    static capitalize(word: string): string {\n      return `${word[0].toUpperCase()}${word.split('').slice(1).join('').toLowerCase()}`\n    }\n\n    static PgnDate(dt: Date = new Date()): string {\n      let y = dt.getFullYear()\n      let m = (dt.getMonth() + 1).toString().replace(/^(\\d)$/, '0$1')\n      let d = (dt.getDate()).toString().replace(/^(\\d)$/, '0$1')\n      return `${y}.${m}.${d}`\n    }\n\n    static row(sq: number|string): number {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return Math.floor(sq / 8)\n    }\n    static col(sq: number|string): number {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return sq % 8\n    }\n\n    static col2string(r: number): string {\n      return r < 8 && r >= 0 ? String.fromCharCode(r + 97) : ''\n    }\n\n    static string2col(c: string): number {\n      return !!c.match(/^[a-h]$/) ? c.charCodeAt(0) - 97 : -1\n    }\n\n    static row2string(r: number): string {\n      return r < 8 && r >= 0 ? (r + 1).toString(10) : ''\n    }\n\n    static string2row(c: string): number {\n      return !!c.match(/^[1-8]$/) ? c.charCodeAt(0) - 49 : -1\n    }\n\n    static rowcol2sq(row: number, col: number): number {\n      if (row < 0 || row > 7 || col < 0 || col > 7) return -1\n      return row * 8 + col\n    }\n\n    static isEven(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return sq % 2 === 0\n    }\n    static isOdd(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      return !Game.isEven(sq)\n    }\n    static isLight(sq: string|number): boolean {\n      if (typeof sq === 'string') sq = Game.san2sq(sq)\n      const orec = Game.isOdd(Game.row(sq)) && Game.isEven(Game.col(sq))\n      const eroc = Game.isEven(Game.row(sq)) && Game.isOdd(Game.col(sq))\n      return orec || eroc\n    }\n    static isDark(sq: string|number): boolean {\n      return !Game.isLight(sq)\n    }\n\n    static xor56(pos: string): string {\n      let splitted: string[] = pos.split('')\n      return splitted.map((_, i) => splitted[i ^ 56]).join('')\n    }\n\n    static compressFenPos(pos: string = Game.fen2obj().pos): string {\n      return Game.xor56(pos).match(/\\w{8}/g).join('/').replace(/0+/g, z => z.length.toString())\n    }\n\n    static expandFenPos(fenPos: string = Game.fen2obj().fenPos): string {\n      return Game.xor56(fenPos.split('/').join('').replace(/\\d/g, d => '0'.repeat(parseInt(d))))\n    }\n\n    static deprecatedCompressFenPos(pos: string = Game.fen2obj().pos): string {\n      let splitted = pos.split('')\n      let inverted = splitted.map((_, i) => splitted[i ^ 56]).join('')\n      return inverted.replace(/(\\w{8})(?=\\S)/g, \"$1/\")\n      .replace(/(0+)/g, zeros => zeros.length.toString())\n    }\n  \n    static deprecatedExpandFenPos(fenPos: string = Game.fen2obj().fenPos): string {\n      let expanded = fenPos.replace(/\\//g, '')\n      .replace(/\\d/g, (i) => '0'.repeat(parseInt(i)))\n      let splitted = expanded.split('')\n      return splitted.map((_, i) => splitted[i ^ 56]).join('')\n    }\n  \n    static fen2obj(fen: string = Game.defaultFen): IFenObj {\n      let [fenPos, turn, castling, enPassant, shalfMoveClock, sfullMoveNumber] = fen.split(/\\s+/)\n      let pos = Game.expandFenPos(fenPos)\n      let halfMoveClock: number  = parseInt(shalfMoveClock)\n      let fullMoveNumber: number = parseInt(sfullMoveNumber)\n      return {pos, fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber}\n    }\n  \n    static obj2fen(fenObj: IFenObj): string {\n      let {pos, fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber} = fenObj\n      if (typeof fenPos === 'undefined') {\n        fenPos = Game.compressFenPos(pos)\n      }\n      return [fenPos, turn, castling, enPassant, halfMoveClock, fullMoveNumber].join(' ')\n    }\n  \n    static isWhiteFigure(figure: string): boolean {\n        return 'PNBRQK'.indexOf(figure) !== -1\n    }\n\n    static isBlackFigure(figure: string): boolean {\n        return 'pnbrqk'.indexOf(figure) !== -1\n    }\n\n    static isFriend(fig1: string, fig2: string): boolean {\n        return (Game.isWhiteFigure(fig1) && Game.isWhiteFigure(fig2))\n          || (Game.isBlackFigure(fig1) && Game.isBlackFigure(fig2))\n    }\n\n    static isFoe(fig1: string, fig2: string): boolean {\n        return (Game.isWhiteFigure(fig1) && Game.isBlackFigure(fig2))\n          || (Game.isBlackFigure(fig1) && Game.isWhiteFigure(fig2))\n    }\n\n    static san2sq(san: string): number {\n        if (!san.match(/^[a-h][1-8]$/)) return -1\n        return san.charCodeAt(0) - 97 + (san.charCodeAt(1) - 49) * 8\n    }\n\n    static sq2san(sq: number): string {\n        if (sq < 0 || sq > 63) return '-'\n        return `${String.fromCharCode((sq % 8) + 97)}${Math.floor(sq / 8) + 1}`\n    }\n\n    static isEqualPos(fen1: string, fen2: string): boolean {\n      let [fen_obj1, fen_obj2] = [Game.fen2obj(fen1), Game.fen2obj(fen2)]\n      return fen_obj1.fenPos === fen_obj2.fenPos\n        && fen_obj1.turn === fen_obj2.turn\n        && fen_obj1.castling === fen_obj2.castling\n        && fen_obj1.enPassant === fen_obj2.enPassant\n    }\n\n    static boardArray(): number[] {\n      const arr = new Array(64)\n      arr.fill(0)\n      return arr.map((_, i) => i)\n    }g\n\n    static countFigures(figure: string, fen: string): number {\n      const pos: string[] = Game.fen2obj(fen).pos.split('')\n      return pos.filter(f => f === figure).length\n    }\n\n    static figuresArray(figure: string, fen: string): number[] {\n      const pos: string = Game.fen2obj(fen).pos\n      return Game.boardArray().filter(i => pos[i] === figure)\n    }\n\n    static figuresColors(figure: string, fen: string): string[] {\n      let figsArr: number[] = Game.figuresArray(figure, fen)\n      return figsArr.map(i => Game.isLight(i) ? 'light': 'dark')\n    }\n\n    static results: IResults = {\n      white: '1-0',\n      black: '0-1',\n      draw: '1/2-1/2',\n      unterminated: '*'\n    }\n    static defaultFen: string = 'rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1'\n    static emptyFen: string = '8/8/8/8/8/8/8/8 w - - 0 1'\n  \n    static sicilianFen: string = 'rnbqkbnr/pp1ppppp/8/2p5/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 1'\n    static indiareyFen: string = 'r1bq1rk1/pppnn1bp/3p4/3Pp1p1/P1P1Pp2/2N2P2/1P2BBPP/R2QNRK1 b - a3 0 13'\n    static yugoslavFen: string = 'r1bq1rk1/pp2ppbp/2np1np1/8/3NP3/2N1BP2/PPPQ2PP/R3KB1R w KQ - 3 9'\n    static berlinFen: string = 'r1bk1b1r/ppp2ppp/2p5/4Pn2/8/5N2/PPP2PPP/RNB2RK1 w - - 0 9'\n\n    static sanRegExp = /(?:(^0-0-0|^O-O-O)|(^0-0|^O-O)|(?:^([a-h])(?:([1-8])|(?:x([a-h][1-8])))(?:=?([NBRQ]))?)|(?:^([NBRQK])([a-h])?([1-8])?(x)?([a-h][1-8])))(?:(\\+)|(#)|(\\+\\+))?$/\n  \n\n////////////////////////////////////////////////////////////\n\n    fens: string[] = []\n    sans: IMoveInfo[] = []\n    tags: ISevenTags = <ISevenTags>{\n      Event: 'Internet Game',\n      Site: 'Internet',\n      Date: Game.PgnDate(),\n      Round: '?',\n      White: 'White Player',\n      Black: 'Black Player',\n      Result: Game.results.unterminated\n    }\n\n    constructor(fen: string = Game.defaultFen) {\n      this.reset(fen)\n    }\n  \n    reset(fen: string = Game.defaultFen) {\n      if (!this.validate_fen(fen)) {\n        throw new Error('Invalid FEN')\n      }\n      this.fens = [fen]\n      this.sans = [<IMoveInfo>{}]\n      this.tags.Result = Game.results.unterminated\n    }\n  \n    getMaxPos() {return this.fens.length - 1}\n\n    _getWhat(n: number = this.getMaxPos(), what: string = 'pos'): string {\n      n = n < 0 ? 0 : n >= this.fens.length ? this.getMaxPos() : n\n      return Game.fen2obj(this.fens[n])[what]\n    }\n  \n    getPos(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'pos')\n    }\n  \n    getFenPos(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'fenPos')\n    }\n  \n    getTurn(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'turn')\n    }\n  \n    getCastling(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'castling')\n    }\n  \n    getEnPassant(n: number = this.getMaxPos()): string {\n      return this._getWhat(n, 'enPassant')\n    }\n  \n    getHalfMoveClock(n: number = this.getMaxPos()): number {\n      return parseInt(this._getWhat(n, 'halfMoveClock'))\n    }\n  \n    getFullMoveNumber(n: number = this.getMaxPos()): number {\n      return parseInt(this._getWhat(n, 'fullMoveNumber'))\n    }\n\n    isShortCastling(from: number, to: number, figure: string): boolean {\n        return (from === 4 && to === 6 && figure === 'K')\n          || (from === 60 && to === 62 && figure === 'k')\n    } \n\n    isLongCastling(from: number, to: number, figure: string): boolean {\n        return (from === 4 && to === 2 && figure === 'K')\n          || (from === 60 && to === 58 && figure === 'k')\n    } \n\n    isEnPassant(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return Game.col(from) !== Game.col(to) \n          && !!pos[from].match(/[Pp]/) \n          && pos[to] === '0'\n    }\n\n    isTwoSteps(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return Math.abs(Game.row(from) - Game.row(to)) === 2\n          && !!pos[from].match(/[Pp]/)\n    }\n\n    isPromoting(from: number, to: number, npos: number = this.getMaxPos()): boolean {\n        let pos: string = this.getPos(npos)\n        return (pos[from] == 'P' && Game.row(to) === 7) \n          || (pos[from] == 'p' && Game.row(to) === 0)\n    }\n\n    moveInfo2san(info: IMoveInfo): string {\n        \n        if (this.isShortCastling(info.from, info.to, info.figureFrom)) return 'O-O'\n        if (this.isLongCastling(info.from, info.to, info.figureFrom)) return 'O-O-O'\n        //console.log(`In moveInfo2san, figureFrom is: ${info.figureFrom}`)\n        let figure: string = !info.figureFrom.match(/[Pp]/)\n          ? info.figureFrom.toUpperCase()\n          : info.capture\n          ? Game.sq2san(info.from)[0]\n          : ''\n\n        let infoOrigin: string = info.infoOrigin ? info.infoOrigin : ''\n        let capture: string = info.capture ? 'x' : '' \n        let dest: string = Game.sq2san(info.to)\n        let promotion: string = info.promotion ? `=${info.promotion.toUpperCase()}` : ''\n        let checkInfo: string = info.checkmate\n          ? '#'\n          : info.check\n          ? '+'\n          : '' \n\n        return `${figure}${infoOrigin}${capture}${dest}${promotion}${checkInfo}`\n    }\n\n    san2MoveInfo(san: string, fen: string = this.fen()): IMoveInfo {\n      //Must override\n      if (!fen.length) return <IMoveInfo>null\n      if (!san.length) return <IMoveInfo>null\n      return <IMoveInfo>null\n    }\n\n    canMove(moveInfo: IMoveInfo, n: number = this.getMaxPos()): boolean {\n      //Must override\n      if (n < 0 || n > this.getMaxPos()) return false\n      let { figureFrom, figureTo, turn } = moveInfo\n\n      if (\"pnbrqkPNBRQK\".indexOf(figureFrom) === -1) return false\n      if (Game.isFriend(figureFrom, figureTo)) return false\n      if ((Game.isWhiteFigure(figureFrom) && turn === 'b')\n        || (Game.isBlackFigure(figureFrom) && turn === 'w')) return false\n      \n      return true\n    }\n\n    pgnHeaders(): string {\n      let arr = []\n      for (let t in this.tags) {\n        arr = [...arr, `[${t} \"${this.tags[t]}\"]`]\n      }\n      return arr.join('\\n')\n    }\n\n    pgnMoves(): string {\n        let resp: string = this.history({verbose: true}).map(mi => {\n            let info: IMoveInfo = <IMoveInfo>mi\n            let prefix: string = info.turn === 'w' ? `${info.fullMoveNumber}. ` : ''\n            let ep: string = info.enPassant ? ' e.p.' : ''\n            return `${prefix}${info.san}${ep}`\n        })\n        .join('  ')\n        return resp\n    }\n\n// Beginning of public interface methods\n\n    ascii(flipBoard: boolean = false, n: number = this.getMaxPos()): string {\n      let dottedPos = this.getPos(n).replace(/0/g, '.')\n      let header = '   +------------------------+'\n      let blank =  ' '.repeat(header.length)\n      let footer= flipBoard ? '     h  g  f  e  d  c  b  a' : '     a  b  c  d  e  f  g  h'\n      let rows = []\n      for (let y = 0; y < 8; y++) {\n          let r = flipBoard ? ` ${y + 1} |` : ` ${8 - y} |`\n          for (let x = 0; x < 8; x++) {\n              r += ` ${dottedPos[(y * 8 + x) ^ (flipBoard ? 7 : 56)]} `\n          }\n          r += '|'\n          rows.push([r, blank].join('\\n'))\n      }\n      return [header, blank, ...rows, header, blank, footer].join('\\n')\n    }\n\n    clear(): void {\n      this.reset(Game.emptyFen)\n    }\n\n    fen(index: number = this.getMaxPos()): string {return this.fens[index]}\n\n    history(options: object = {verbose: false}): any[] {\n        if (options['verbose']) {\n            return this.sans.slice(1)\n        } else {\n            return this.sans.slice(1).map( mi => mi.san)\n        }\n    }\n\n    game_over(): boolean {\n      //Must override\n      return false\n    }\n\n    get(square: any, index: number = this.getMaxPos()): string {\n      if (typeof square === 'string') square = Game.san2sq(square)\n      return this.getPos(index)[square]\n    }\n\n    in_check(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_checkmate(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_draw(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_stalemate(index: number = this.getMaxPos()): boolean {\n      //Must override\n      if (index < 0 || index > this.getMaxPos()) return false\n      return false\n    }\n\n    in_threefold_repetition(index: number = this.getMaxPos()): boolean {\n      if (index < 0 || index > this.getMaxPos()) return false\n        let sliced: string[] = this.fens.map(fen => fen.split(/\\s+/).slice(0, 4).join(' '))\n        // console.log(sliced)\n        for (let i = 0; i <= index; i++ ) {\n          let reps = 1\n          for (let j = i + 1; j <= index; j++) {\n            if (sliced[i] === sliced[j]) {\n              reps++\n              console.log(`Position ${sliced[j]} has repeated ${reps} times`)\n              if (reps >= 3) {\n                return true\n              }\n            }\n          }\n        }\n      return false\n    }\n\n    header(...args: string[]): ISevenTags {\n      if (Game.isOdd(args.length)) args = args.slice(0, args.length - 1)\n      if (!args.length) return this.tags\n      let [keys, values] = [args.filter((_, i) => Game.isEven(i)).map(Game.capitalize),\n        args.filter((_, i) => Game.isOdd(i))]\n      for (let n: number = 0; n < keys.length; n++) {\n        this.tags[keys[n]] = values[n]\n      }\n      return this.tags\n    }\n\n    insufficient_material(_: number = this.getMaxPos()): boolean\n    {\n      //Must override\n      return false\n    }\n\n    label(): string  {return `${this.tags.White} - ${this.tags.Black}\\t ${this.tags.Result}`}\n\n    toString(): string {return this.label()}\n    \n    load(fen: string = Game.defaultFen): boolean {\n      this.reset(fen)\n      return true\n    }\n\n    load_pgn(pgn: string): boolean {\n      if (!pgn.length) return false\n      //Must override\n      return false\n    }\n\n      \n\n    move(...args: any[]): boolean {\n        let moveInfo: IMoveInfo\n        let from: any\n        let to: any\n        let promotion: string\n\n        if (args.length === 0) {\n          return false\n        } else if (args.length === 1) {\n          if (typeof args[0] === 'string') {\n            moveInfo = this.san2MoveInfo(args[0])\n            if (!moveInfo) return false \n            from = moveInfo.from\n            to = moveInfo.to\n            promotion = moveInfo.promotion\n          } else {\n            return false\n          }\n        } else {\n            [from, to, promotion] = args\n            if (typeof from === 'string') {\n              from = Game.san2sq(from)\n            }  \n    \n            if (typeof to === 'string') {\n              to = Game.san2sq(to)\n            }  \n        }\n\n        let fObj: IFenObj = Game.fen2obj(this.fens[this.getMaxPos()])\n        let pos: string[] = fObj.pos.split('')\n        let turn: string = fObj.turn\n        let figFrom: string = pos[from]\n        let figInTo: string = pos[to]\n        let figTo: string = promotion ? promotion : figFrom\n\n        moveInfo = <IMoveInfo>{enPassant: false}\n\n        moveInfo.turn = turn\n        moveInfo.from = from\n        moveInfo.to = to\n        moveInfo.figureFrom = figFrom\n        moveInfo.figureTo = figInTo\n        moveInfo.promotion = promotion\n        moveInfo.capture = figInTo !== '0' || (this.isEnPassant(from, to) \n          && to === Game.san2sq(fObj.enPassant))\n        moveInfo.san = this.moveInfo2san(moveInfo)\n        moveInfo.fullMoveNumber = fObj.fullMoveNumber\n        moveInfo.castling = this.isShortCastling(from, to, moveInfo.figureFrom) \n          || this.isLongCastling(from, to, moveInfo.figureFrom)\n\n        let bCan = this.canMove(moveInfo)\n\n        if (!bCan) return false\n\n        pos[from] = '0'\n        pos[to] = figTo\n        if (figFrom === 'K' && from === 4 && to === 6) {\n            pos[7] = '0'\n            pos[5] = 'R'\n        }\n        if (figFrom === 'K' && from === 4 && to === 2) {\n            pos[0] = '0'\n            pos[3] = 'R'\n        }\n        if (figFrom === 'k' && from === 60 && to === 62) {\n            pos[63] = '0'\n            pos[61] = 'r'\n        }\n        if (figFrom === 'k' && from === 60 && to === 58) {\n            pos[56] = '0'\n            pos[59] = 'R'\n        }\n\n        if (this.isEnPassant(from, to)) {\n            //console.log(\"En passant move from \" + from + \" to \" + to)\n            if (to !== Game.san2sq(fObj.enPassant)) {\n                //console.log(`Destination is ${to} and en-passant is ${Game.san2sq(fObj.enPassant)}`)\n            } else {\n                let sunk: number = Game.san2sq(fObj.enPassant) + 8 * (figFrom === 'P' ? -1 : 1)\n                //console.log(\"En passant sunk pawn at \" + sunk) \n                pos[sunk] = '0'\n                moveInfo.enPassant = true\n            }\n        }\n\n        switch(from) {\n            case 4:\n            fObj.castling = fObj.castling.replace(/[KQ]/g, '')\n            break\n            case 60:\n            fObj.castling = fObj.castling.replace(/[kq]/g, '')\n            break\n            case 0:\n            fObj.castling = fObj.castling.replace('Q', '')\n            break\n            case 7:\n            fObj.castling = fObj.castling.replace('K', '')\n            break\n            case 56:\n            fObj.castling = fObj.castling.replace('q', '')\n            break\n            case 63:\n            fObj.castling = fObj.castling.replace('k', '')\n            break\n            default:\n        }\n        fObj.castling = fObj.castling === '' ? '-' : fObj.castling\n\n        if (this.isTwoSteps(from, to)) {\n            fObj.enPassant = Game.sq2san(figFrom === 'P' ? to - 8 : to + 8)\n        } else {\n            fObj.enPassant = '-'\n        }\n\n        fObj.halfMoveClock = !!figFrom.match(/[Pp]/) || moveInfo.capture ? 0 : ++fObj.halfMoveClock\n        fObj.fullMoveNumber = turn === 'w' ? fObj.fullMoveNumber : ++ fObj.fullMoveNumber\n        \n        fObj = {\n            ...fObj, \n            pos: pos.join(''), \n            fenPos: Game.compressFenPos(pos.join('')),\n            turn: turn === 'w' ? 'b' : 'w'\n            }\n        this.fens = [...this.fens, Game.obj2fen(fObj)]\n        this.sans = [...this.sans, moveInfo]\n        return true\n    }\n\n    moves(options: object = null): string[] {\n      //Must override\n      if (!!options) {\n        return []\n      } else {\n        return []\n      }\n    } \n\n    pgn(): string {\n      return `${[this.pgnHeaders(), this.pgnMoves()].join('\\n\\n')} ${this.tags.Result}`\n    }\n\n    put(figure: string, square: any, index: number = this.getMaxPos()): boolean {\n      if (\"pnbrqk0\".indexOf(figure.toLowerCase()) === -1) return false\n      if (typeof square === 'string') square = Game.san2sq(square)\n      if (square < 0 || square > 63) return false\n      let fen_obj: IFenObj = Game.fen2obj(this.fens[index])\n      let posArray: string[] = fen_obj.pos.split('')\n      posArray[square] = figure\n      delete(fen_obj.fenPos)\n      fen_obj.pos = posArray.join('')\n      let fen: string = Game.obj2fen(fen_obj)\n      this.fens[index] = fen\n      return true\n    }\n\n    remove(square: any, index: number = this.getMaxPos()): boolean {\n      return this.put('0', square, index)\n    }\n\n    square_color(square: any): string {\n      if (typeof square === 'string') square = Game.san2sq(square)\n      return Game.isDark(square) ? 'dark' : 'light'\n    }\n\n    turn(index: number = this.getMaxPos()): string {\n      return this.getTurn(index)\n    }\n\n    undo(): boolean {\n      if (this.getMaxPos() < 1) return false\n      this.fens.pop()\n      this.sans.pop()\n      this.tags.Result = Game.results.unterminated\n      return true\n    }\n\n    validate_fen(fen: string): boolean {\n      //Must override\n      if (fen.length) return true\n      return false\n    }    \n\n  }\n  \n \n"]}